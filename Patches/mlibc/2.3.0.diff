diff -Nur mlibc-2.3.0/abis/owlos/auxv.h mlibc-2.3.0-owlos/abis/owlos/auxv.h
--- mlibc-2.3.0/abis/owlos/auxv.h	1969-12-31 18:00:00.000000000 -0600
+++ mlibc-2.3.0-owlos/abis/owlos/auxv.h	2022-07-06 10:50:23.826313214 -0500
@@ -0,0 +1,12 @@
+#ifndef _ABIBITS_AUXV_H
+#define _ABIBITS_AUXV_H
+
+#define AT_ENTRY 10
+#define AT_PHDR 20
+#define AT_PHENT 21
+#define AT_PHNUM 22
+#define AT_SECURE 23
+#define AT_RANDOM 25
+#define AT_EXECFN 31
+
+#endif // _ABIBITS_AUXV_H
diff -Nur mlibc-2.3.0/ci/owlos.cross-file mlibc-2.3.0-owlos/ci/owlos.cross-file
--- mlibc-2.3.0/ci/owlos.cross-file	1969-12-31 18:00:00.000000000 -0600
+++ mlibc-2.3.0-owlos/ci/owlos.cross-file	2022-07-07 12:06:25.523876314 -0500
@@ -0,0 +1,12 @@
+[binaries]
+c = 'gcc-10'
+cpp = 'g++-10'
+
+[properties]
+needs_exe_wrapper = true
+
+[host_machine]
+system = 'owlos'
+cpu_family = 'x86_64'
+cpu = 'x86_64'
+endian = 'little'
diff -Nur mlibc-2.3.0/meson.build mlibc-2.3.0-owlos/meson.build
--- mlibc-2.3.0/meson.build	2022-06-20 04:58:47.000000000 -0500
+++ mlibc-2.3.0-owlos/meson.build	2022-07-07 11:58:27.813435110 -0500
@@ -142,6 +142,10 @@
 	rtdl_include_dirs += include_directories('sysdeps/dripos/include')
 	libc_include_dirs += include_directories('sysdeps/dripos/include')
 	subdir('sysdeps/dripos')
+elif host_machine.system() == 'owlos'
+	rtdl_include_dirs += include_directories('sysdeps/owlos/include')
+	libc_include_dirs += include_directories('sysdeps/owlos/include')
+	subdir('sysdeps/owlos')
 else
 	error('No sysdeps defined for OS: ' + host_machine.system())
 endif
diff -Nur mlibc-2.3.0/meson_options.txt mlibc-2.3.0-owlos/meson_options.txt
--- mlibc-2.3.0/meson_options.txt	2022-06-20 04:58:47.000000000 -0500
+++ mlibc-2.3.0-owlos/meson_options.txt	2022-07-10 12:02:02.571681573 -0500
@@ -1,6 +1,6 @@
 option('headers_only', type : 'boolean', value : false)
 option('mlibc_no_headers', type : 'boolean', value : false)
-option('static', type : 'boolean', value : false)
+option('static', type : 'boolean', value : true)
 option('build_tests', type: 'boolean', value : false)
 option('disable_ansi_option', type: 'boolean', value : false)
 option('disable_crypt_option', type: 'boolean', value : false)
diff -Nur mlibc-2.3.0/options/rtdl/generic/linker.cpp mlibc-2.3.0-owlos/options/rtdl/generic/linker.cpp
--- mlibc-2.3.0/options/rtdl/generic/linker.cpp	2022-06-20 04:58:47.000000000 -0500
+++ mlibc-2.3.0-owlos/options/rtdl/generic/linker.cpp	2022-07-06 15:08:31.043332388 -0500
@@ -14,7 +14,7 @@
 
 bool verbose = false;
 bool stillSlightlyVerbose = false;
-bool logBaseAddresses = false;
+bool logBaseAddresses = true;
 bool eagerBinding = true;
 
 #if defined(__x86_64__)
diff -Nur mlibc-2.3.0/sysdeps/owlos/AMD64/crt0.S mlibc-2.3.0-owlos/sysdeps/owlos/AMD64/crt0.S
--- mlibc-2.3.0/sysdeps/owlos/AMD64/crt0.S	1969-12-31 18:00:00.000000000 -0600
+++ mlibc-2.3.0-owlos/sysdeps/owlos/AMD64/crt0.S	2022-07-04 10:23:56.110493927 -0500
@@ -0,0 +1,5 @@
+.section .text
+.global _start
+_start:
+    mov $main, %rdi
+    call __mlibc_entry
diff -Nur mlibc-2.3.0/sysdeps/owlos/AMD64/thread_entry.S mlibc-2.3.0-owlos/sysdeps/owlos/AMD64/thread_entry.S
--- mlibc-2.3.0/sysdeps/owlos/AMD64/thread_entry.S	1969-12-31 18:00:00.000000000 -0600
+++ mlibc-2.3.0-owlos/sysdeps/owlos/AMD64/thread_entry.S	2022-07-06 10:47:08.613181739 -0500
@@ -0,0 +1,7 @@
+.section .text
+.global __mlibc_start_thread
+__mlibc_start_thread:
+	pop %rdi
+	pop %rsi
+	pop %rdx
+	call __mlibc_enter_thread
diff -Nur mlibc-2.3.0/sysdeps/owlos/generic/entry.cpp mlibc-2.3.0-owlos/sysdeps/owlos/generic/entry.cpp
--- mlibc-2.3.0/sysdeps/owlos/generic/entry.cpp	1969-12-31 18:00:00.000000000 -0600
+++ mlibc-2.3.0-owlos/sysdeps/owlos/generic/entry.cpp	2022-07-04 15:41:37.703560166 -0500
@@ -0,0 +1,32 @@
+#include <stdint.h>
+#include <stdlib.h>
+#include <bits/ensure.h>
+#include <mlibc/elf/startup.h>
+
+// defined by the POSIX library
+void __mlibc_initLocale();
+
+extern "C" uintptr_t *__dlapi_entrystack();
+
+extern char **environ;
+static mlibc::exec_stack_data __mlibc_stack_data;
+
+struct LibraryGuard {
+	LibraryGuard();
+};
+
+static LibraryGuard guard;
+
+LibraryGuard::LibraryGuard() {
+	__mlibc_initLocale();
+
+	// Parse the exec() stack.
+	mlibc::parse_exec_stack(__dlapi_entrystack(), &__mlibc_stack_data);
+	mlibc::set_startup_data(__mlibc_stack_data.argc, __mlibc_stack_data.argv,
+			__mlibc_stack_data.envp);
+}
+
+extern "C" void __mlibc_entry(int (*main_fn)(int argc, char *argv[], char *env[])) {
+	auto result = main_fn(__mlibc_stack_data.argc, __mlibc_stack_data.argv, environ);
+	exit(result);
+}
\ No newline at end of file
diff -Nur mlibc-2.3.0/sysdeps/owlos/generic/generic.cpp mlibc-2.3.0-owlos/sysdeps/owlos/generic/generic.cpp
--- mlibc-2.3.0/sysdeps/owlos/generic/generic.cpp	1969-12-31 18:00:00.000000000 -0600
+++ mlibc-2.3.0-owlos/sysdeps/owlos/generic/generic.cpp	2022-07-06 19:41:00.379585262 -0500
@@ -0,0 +1,348 @@
+#include <owlos/syscall.h>
+#include <owlos/mmap_args.h>
+#include <stddef.h>
+#include <bits/ensure.h>
+#include <abi-bits/pid_t.h>
+#include <mlibc/all-sysdeps.hpp>
+#include <mlibc/debug.hpp>
+#include <mlibc/thread-entry.hpp>
+#include <errno.h>
+#include <dirent.h>
+#include <errno.h>
+#include <fcntl.h>
+#include <limits.h>
+#include <sys/resource.h>
+#include <sys/ioctl.h>
+#include <sys/stat.h>
+#include <sys/types.h>
+
+namespace mlibc {
+    // CORE
+    int sys_futex_tid() {
+        return syscall(SYS_GETPID);
+    }
+    int sys_futex_wait(int *pointer, int expected, const struct timespec *time) {
+        mlibc::infoLogger() << "sys_futex_wait() not implemented" << frg::endlog;
+        return 0;
+    }
+    int sys_futex_wake(int *pointer) {
+        mlibc::infoLogger() << "sys_futex_wake() not implemented" << frg::endlog;
+        return 0;
+    }
+    int sys_tcb_set(void *pointer) {
+        mlibc::infoLogger() << "sys_tcb_set() not implemented" << frg::endlog;
+        return 0;
+    }
+    int sys_vm_map(void *hint, size_t size, int prot, int flags, int fd, off_t offset, void **window) {
+        struct owlOS_MmapArgs args;
+        args.addr = (uintptr_t)hint;
+        args.size = (uintptr_t)size;
+        args.prot = (uintptr_t)prot;
+        args.flags = (uintptr_t)flags;
+        args.fd = (uintptr_t)fd;
+        args.offset = (intptr_t)offset;
+        auto result = syscall(SYS_MMAP, &args);
+        if (result < 0) {
+            return -result;
+        }
+        *window = (void *)result;
+        return 0;
+    }
+    int sys_vm_unmap(void *address, size_t size) {
+        auto result = syscall(SYS_MUNMAP, address, size);
+        if(result < 0 ) {
+            return -result;
+        }
+        return 0;
+    }
+    int sys_anon_allocate(size_t size, void **pointer) {
+        return sys_vm_map((void*)0,size,3,MAP_ANONYMOUS | MAP_PRIVATE,-1,0,pointer);
+    }
+    int sys_anon_free(void *pointer, size_t size) {
+        return sys_vm_unmap(pointer, size);
+    }
+    void sys_libc_panic() {
+        sys_libc_log("mlibc panic");
+        sys_exit(1);
+    }
+    void sys_libc_log(const char *msg) {
+        syscall(SYS_FOXKERNEL_LOG, msg);
+    }
+    void sys_exit(int status) {
+        syscall(SYS_EXIT, status);
+
+        __builtin_unreachable();
+    }
+    #ifndef MLIBC_BUILDING_RTDL
+    pid_t sys_getpid() {
+        return syscall(SYS_GETPID);
+    }
+    int sys_kill(int pid, int sig) {
+        auto result = syscall(SYS_KILL, pid, sig);
+        if(result < 0) {
+            return -result;
+        }
+        return result;
+    }
+    pid_t sys_getpgid(pid_t pid, pid_t *pgid) {
+        *pgid = syscall(SYS_GETPGRP);
+        return 0;
+    }
+    pid_t sys_getppid() {
+        return syscall(SYS_GETPPID);
+    }
+    int sys_clock_get(int clock, time_t *secs, long *nanos) {
+        return syscall(SYS_CLOCK_GET,secs,nanos);
+    }
+    int sys_getcwd(char *buffer, size_t size) {
+        auto result = syscall(SYS_GETCWD, buffer, size);
+        return 0;
+    }
+    int sys_chdir(const char *path) {
+        auto result = syscall(SYS_CHDIR, path);
+        return 0;
+    }
+    int sys_gethostname(char *buffer, size_t bufsize) {
+        UNIMPLEMENTED("sys_gethostname")
+    }
+    int sys_sleep(time_t *sec, long *nanosec) {
+        struct timespec deadline, current;
+        sys_clock_get(0,&deadline.tv_sec,&deadline.tv_nsec);
+        deadline.tv_sec += *sec;
+        deadline.tv_nsec += *nanosec;
+        while(1) {
+            sys_clock_get(0,&current.tv_sec,&current.tv_nsec);
+            if(current.tv_sec > deadline.tv_sec || (current.tv_sec == deadline.tv_sec && current.tv_nsec >= deadline.tv_nsec)) {
+                break;
+            }
+            sys_yield();
+        }
+        return 0;
+    }
+    uid_t sys_getuid() {
+        return syscall(SYS_GETUID);
+    }
+    uid_t sys_geteuid() {
+        return syscall(SYS_GETEUID);
+    }
+    int sys_setuid(uid_t uid) UNIMPLEMENTED("sys_setuid")
+    int sys_seteuid(uid_t euid) UNIMPLEMENTED("sys_seteuid")
+    gid_t sys_getgid() {
+        return syscall(SYS_GETGID);
+    }
+    gid_t sys_getegid() {
+        return syscall(SYS_GETEGID);
+    }
+    int sys_setgid(gid_t gid) {
+        mlibc::infoLogger() << "mlibc: sys_setgid not implemented" << frg::endlog;
+        return 0;
+    }
+    int sys_setegid(gid_t egid) {
+        mlibc::infoLogger() << "mlibc: sys_setegid not implemented" << frg::endlog;
+        return 0;
+    }
+    void sys_yield() {
+        syscall(SYS_YIELD);
+    }
+    int sys_clone(void *entry, void *user_arg, void *tcb, pid_t *tid_out) {
+        *tid_out = syscall(SYS_FORK,(uintptr_t)__mlibc_start_thread,prepare_stack(entry, user_arg, tcb));
+        return 0;
+    }
+    void sys_thread_exit() UNIMPLEMENTED("sys_thread_exit")
+    int sys_waitpid(pid_t pid, int *status, int flags, pid_t *ret_pid) {
+        int result = syscall(SYS_POLLPID, pid, status, flags);
+        while(result == 0) {
+            sys_yield();
+            result = syscall(SYS_POLLPID, pid, status, flags);
+        }
+        if(result < 0) {
+            return -result;
+        }
+        *ret_pid = (pid_t)result;
+        return 0;
+    }
+    int sys_fork(pid_t *child) {
+        auto result = syscall(SYS_FORK,0,0);
+        if (result < 0) {
+            return -result;
+        }
+        *child = result;
+        return 0;
+    }
+    int sys_execve(const char *path, char *const argv[], char *const envp[]) {
+        auto result = syscall(SYS_EXECVE, path, argv, envp);
+        if (result < 0) {
+            return -result;
+        }
+        __builtin_unreachable();
+    }
+    int sys_getentropy(void *buffer, size_t length) UNIMPLEMENTED("sys_getentropy")
+    #endif
+    // FILESYSTEM
+    int sys_write(int fd, const void *buffer, size_t count, ssize_t *written) {
+        auto result = syscall(SYS_WRITE, fd, buffer, count);
+        if (result < 0) {
+            return -result;
+        }
+        *written = result;
+        return 0;
+    }
+    int sys_read(int fd, void *buf, size_t count, ssize_t *bytes_read) {
+        auto result = syscall(SYS_READ, fd, buf, count);
+        if (result < 0) {
+            *bytes_read = 0;
+            return -result;
+        }
+        *bytes_read = result;
+        return 0;
+    }
+    int sys_pwrite(int fd, const void *buffer, size_t count, off_t off, ssize_t *written) UNIMPLEMENTED("sys_pwrite")
+    int sys_pread(int fd, void *buf, size_t count, off_t off, ssize_t *bytes_read) UNIMPLEMENTED("sys_pread")
+    int sys_seek(int fd, off_t offset, int whence, off_t *new_offset) {
+        auto result = syscall(SYS_LSEEK, fd, offset, whence);
+        if (result < 0) {
+            return -result;
+	    }
+        *new_offset = result;
+        return 0;
+    }
+    int sys_open(const char *filename, int flags, mode_t mode, int *fd) {
+        auto result = syscall(SYS_OPEN, filename, flags);
+        if (result < 0) {
+            return -result;
+        }
+        *fd = result;
+        return 0;
+    }
+    int sys_close(int fd) {
+        auto result = syscall(SYS_CLOSE, fd);
+        if (result < 0) {
+            return -result;
+        }
+        return 0;
+    }
+    int sys_access(const char *filename, int mode) {
+        auto result = syscall(SYS_ACCESS, filename, mode);
+        if (result < 0) {
+            return -result;
+        }
+        return 0;
+    }
+    int sys_stat(fsfd_target fsfdt, int fd, const char *path, int flags, struct stat *statbuf) {
+        if (fsfdt == fsfd_target::path) {
+            auto result = syscall(SYS_STAT,path,statbuf);
+            if (result < 0) {
+                return -result;
+            }
+            return 0;
+        } else if (fsfdt == fsfd_target::fd) {
+            auto result = syscall(SYS_FSTAT,fd,statbuf);
+            if (result < 0) {
+                return -result;
+            }
+            return 0;
+        } else if (fsfdt == fsfd_target::fd_path) {
+            mlibc::infoLogger() << "attempt to call stat with unsupported fsfd target" << frg::endlog;
+            memset(statbuf, 0, sizeof(struct stat));
+        }
+        return 0;
+    }
+    int sys_ioctl(int fd, unsigned long request, void *arg, int *result) {
+        auto sys_res = syscall(SYS_IOCTL, fd, request, arg);
+        if (sys_res < 0) {
+            return -sys_res;
+        }
+        *result = sys_res;
+        return 0;
+    }
+    int sys_isatty(int fd) {
+        return ENOTTY;
+    }
+    int sys_tcgetattr(int fd, struct termios *attr) {
+        mlibc::infoLogger() << "mlibc: tcgetattr is not supported" << frg::endlog;
+        return 0;
+    }
+    int sys_tcsetattr(int fd, int optional_action, const struct termios *attr) {
+        mlibc::infoLogger() << "mlibc: tcsetattr is not supported" << frg::endlog;
+        return 0;
+    }
+    int sys_poll(struct pollfd *fds, nfds_t count, int timeout, int *num_events) {
+        mlibc::infoLogger() << "mlibc: poll is not supported" << frg::endlog;
+        return 0;
+    }
+    int sys_mkdir(const char *path) {
+        auto result = syscall(SYS_OPEN, path, O_DIRECTORY | O_CREAT | O_RDONLY);
+        if (result < 0) {
+            return -result;
+        }
+        syscall(SYS_CLOSE,result);
+        return 0;
+    }
+    int sys_rmdir(const char *path) {
+        sys_unlinkat(0,path,AT_FDCWD);
+    }
+    int sys_link(const char *srcpath, const char *destpath) UNIMPLEMENTED("sys_link")
+    int sys_unlinkat(int fd, const char *path, int flags) {
+        if(fd != AT_FDCWD && *path != '/') {
+            mlibc::infoLogger() << "sys_unlinkat is not supported" << frg::endlog;
+            return 0;
+        }
+        auto result = syscall(SYS_UNLINK, path);
+        if (result < 0) {
+            return -result;
+	    }
+        return 0;
+    }
+    int sys_read_entries(int handle, void *buffer, size_t max_size, size_t *bytes_read) {
+        auto result = syscall(SYS_READ,handle,buffer,max_size);
+        if(result < 0) {
+            return -result;
+        }
+        *bytes_read = result;
+        return 0;
+    }
+    int sys_open_dir(const char *path, int *handle) {
+        return sys_open(path, O_DIRECTORY, 0, handle);
+    }
+    int sys_rename(const char *path, const char *new_path) UNIMPLEMENTED("sys_rename")
+    int sys_readlink(const char *path, void *buffer, size_t max_size, ssize_t *length) UNIMPLEMENTED("sys_readlink")
+    int sys_dup(int fd, int flags, int *newfd) {
+        auto result = syscall(SYS_DUP, fd, ~0);
+        if (result < 0) {
+            return -result;
+        }
+        *newfd = result;
+        return 0;
+    }
+    int sys_dup2(int fd, int flags, int newfd) {
+        auto result = syscall(SYS_DUP, fd, newfd);
+        if (result < 0) {
+            return -result;
+        }
+        return 0;
+    }
+    int sys_fcntl(int fd, int request, va_list args, int *result_value) {
+        mlibc::infoLogger() << "mlibc: sys_fcntl is not supported" << frg::endlog;
+        *result_value = 0;
+        return 0;
+    }
+    int sys_pselect(int nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, const struct timespec *timeout, const sigset_t *sigmask, int *num_events) {
+        mlibc::infoLogger() << "mlibc: sys_pselect is not supported" << frg::endlog;
+        *num_events = 10;
+        return 0;
+    }
+    int sys_chmod(const char *pathname, mode_t mode) {
+        auto result = syscall(SYS_CHMOD, pathname, mode);
+        if (result < 0) {
+            return -result;
+        }
+        return 0;
+    }
+    int sys_pipe(int *fds, int flags) {
+        auto result = syscall(SYS_PIPE, fds);
+        if (result < 0) {
+            return -result;
+        }
+        return 0;
+    }
+}
diff -Nur mlibc-2.3.0/sysdeps/owlos/generic/thread.cpp mlibc-2.3.0-owlos/sysdeps/owlos/generic/thread.cpp
--- mlibc-2.3.0/sysdeps/owlos/generic/thread.cpp	1969-12-31 18:00:00.000000000 -0600
+++ mlibc-2.3.0-owlos/sysdeps/owlos/generic/thread.cpp	2022-07-06 19:40:10.840414020 -0500
@@ -0,0 +1,39 @@
+#include <mlibc/thread-entry.hpp>
+#include <mlibc/all-sysdeps.hpp>
+#include <mlibc/tcb.hpp>
+#include <bits/ensure.h>
+#include <stdint.h>
+#include <stddef.h>
+#include <sys/mman.h>
+
+namespace mlibc {
+
+extern "C" void __mlibc_enter_thread(void *entry, void *user_arg, Tcb *tcb) {
+    while (!__atomic_load_n(&tcb->tid, __ATOMIC_RELAXED))
+        mlibc::sys_futex_wait(&tcb->tid, 0, nullptr);
+
+    if (mlibc::sys_tcb_set(tcb))
+        __ensure(!"sys_tcb_set() failed");
+
+    void *(*func)(void *) = reinterpret_cast<void *(*)(void *)>(entry);
+    auto result = func(user_arg);
+
+    auto self = reinterpret_cast<Tcb *>(tcb);
+
+    self->returnValue = result;
+    __atomic_store_n(&self->didExit, 1, __ATOMIC_RELEASE);
+    mlibc::sys_futex_wake(&self->didExit);
+
+    mlibc::sys_thread_exit();
+}
+
+void *prepare_stack(void *entry, void *user_arg, void *tcb) {
+    auto sp_bottom = reinterpret_cast<uintptr_t>(mmap(nullptr, 0x1000000, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, -1, 0));
+    uintptr_t *sp = reinterpret_cast<uintptr_t *>(sp_bottom + 0x1000000);
+    *--sp = reinterpret_cast<uintptr_t>(tcb);
+    *--sp = reinterpret_cast<uintptr_t>(user_arg);
+    *--sp = reinterpret_cast<uintptr_t>(entry);
+    return sp;
+}
+
+}
\ No newline at end of file
diff -Nur mlibc-2.3.0/sysdeps/owlos/include/abi-bits/abi.h mlibc-2.3.0-owlos/sysdeps/owlos/include/abi-bits/abi.h
--- mlibc-2.3.0/sysdeps/owlos/include/abi-bits/abi.h	1969-12-31 18:00:00.000000000 -0600
+++ mlibc-2.3.0-owlos/sysdeps/owlos/include/abi-bits/abi.h	2022-07-06 08:49:46.987324211 -0500
@@ -0,0 +1,30 @@
+#ifndef _ABIBITS_ABI_H
+#define _ABIBITS_ABI_H
+
+// reserve 3 bits for the access mode
+#define __MLIBC_O_ACCMODE 0x0007
+#define __MLIBC_O_EXEC 1
+#define __MLIBC_O_RDONLY 2
+#define __MLIBC_O_RDWR 3
+#define __MLIBC_O_SEARCH 4
+#define __MLIBC_O_WRONLY 5
+// all remaining flags get their own bit
+#define __MLIBC_O_APPEND 0x00008
+#define __MLIBC_O_CREAT 0x00010
+#define __MLIBC_O_DIRECTORY 0x00020
+#define __MLIBC_O_EXCL 0x00040
+#define __MLIBC_O_NOCTTY 0x00080
+#define __MLIBC_O_NOFOLLOW 0x00100
+#define __MLIBC_O_TRUNC 0x00200
+#define __MLIBC_O_NONBLOCK 0x00400
+#define __MLIBC_O_DSYNC 0x00800
+#define __MLIBC_O_RSYNC 0x01000
+#define __MLIBC_O_SYNC 0x02000
+#define __MLIBC_O_CLOEXEC 0x04000
+#define __MLIBC_O_PATH 0x08000
+#define __MLIBC_O_LARGEFILE 0x10000
+#define __MLIBC_O_NOATIME 0x20000
+#define __MLIBC_O_ASYNC 0x40000
+#define __MLIBC_O_TMPFILE 0x80000
+
+#endif // _ABIBITS_ABI_H
diff -Nur mlibc-2.3.0/sysdeps/owlos/include/abi-bits/access.h mlibc-2.3.0-owlos/sysdeps/owlos/include/abi-bits/access.h
--- mlibc-2.3.0/sysdeps/owlos/include/abi-bits/access.h	1969-12-31 18:00:00.000000000 -0600
+++ mlibc-2.3.0-owlos/sysdeps/owlos/include/abi-bits/access.h	2022-06-20 04:58:47.000000000 -0500
@@ -0,0 +1,9 @@
+#ifndef _ABIBITS_ACCESS_H
+#define _ABIBITS_ACCESS_H
+
+#define F_OK 1
+#define R_OK 2
+#define W_OK 4
+#define X_OK 8
+
+#endif // _ABIBITS_ACCESS_H
diff -Nur mlibc-2.3.0/sysdeps/owlos/include/abi-bits/auxv.h mlibc-2.3.0-owlos/sysdeps/owlos/include/abi-bits/auxv.h
--- mlibc-2.3.0/sysdeps/owlos/include/abi-bits/auxv.h	1969-12-31 18:00:00.000000000 -0600
+++ mlibc-2.3.0-owlos/sysdeps/owlos/include/abi-bits/auxv.h	2022-06-20 04:58:47.000000000 -0500
@@ -0,0 +1,12 @@
+#ifndef _ABIBITS_AUXV_H
+#define _ABIBITS_AUXV_H
+
+#define AT_ENTRY 10
+#define AT_PHDR 20
+#define AT_PHENT 21
+#define AT_PHNUM 22
+#define AT_SECURE 23
+#define AT_RANDOM 25
+#define AT_EXECFN 31
+
+#endif // _ABIBITS_AUXV_H
diff -Nur mlibc-2.3.0/sysdeps/owlos/include/abi-bits/blkcnt_t.h mlibc-2.3.0-owlos/sysdeps/owlos/include/abi-bits/blkcnt_t.h
--- mlibc-2.3.0/sysdeps/owlos/include/abi-bits/blkcnt_t.h	1969-12-31 18:00:00.000000000 -0600
+++ mlibc-2.3.0-owlos/sysdeps/owlos/include/abi-bits/blkcnt_t.h	2022-06-20 04:58:47.000000000 -0500
@@ -0,0 +1,7 @@
+#ifndef _ABIBITS_BLKCNT_T_H
+#define _ABIBITS_BLKCNT_T_H
+
+// TODO: use int64_t?
+typedef long blkcnt_t;
+
+#endif // _ABIBITS_BLKCNT_T_H
diff -Nur mlibc-2.3.0/sysdeps/owlos/include/abi-bits/blksize_t.h mlibc-2.3.0-owlos/sysdeps/owlos/include/abi-bits/blksize_t.h
--- mlibc-2.3.0/sysdeps/owlos/include/abi-bits/blksize_t.h	1969-12-31 18:00:00.000000000 -0600
+++ mlibc-2.3.0-owlos/sysdeps/owlos/include/abi-bits/blksize_t.h	2022-06-20 04:58:47.000000000 -0500
@@ -0,0 +1,9 @@
+
+#ifndef _ABIBITS_BLKSIZE_T_H
+#define _ABIBITS_BLKSIZE_T_H
+
+// TODO: use int64_t?
+typedef long blksize_t;
+
+#endif // _ABIBITS_BLKSIZE_T_H
+
diff -Nur mlibc-2.3.0/sysdeps/owlos/include/abi-bits/dev_t.h mlibc-2.3.0-owlos/sysdeps/owlos/include/abi-bits/dev_t.h
--- mlibc-2.3.0/sysdeps/owlos/include/abi-bits/dev_t.h	1969-12-31 18:00:00.000000000 -0600
+++ mlibc-2.3.0-owlos/sysdeps/owlos/include/abi-bits/dev_t.h	2022-06-20 04:58:47.000000000 -0500
@@ -0,0 +1,8 @@
+
+#ifndef _ABIBITS_DEV_T_H
+#define _ABIBITS_DEV_T_H
+
+typedef unsigned long dev_t;
+
+#endif // _ABIBITS_DEV_T_H
+
diff -Nur mlibc-2.3.0/sysdeps/owlos/include/abi-bits/errno.h mlibc-2.3.0-owlos/sysdeps/owlos/include/abi-bits/errno.h
--- mlibc-2.3.0/sysdeps/owlos/include/abi-bits/errno.h	1969-12-31 18:00:00.000000000 -0600
+++ mlibc-2.3.0-owlos/sysdeps/owlos/include/abi-bits/errno.h	2022-06-20 04:58:47.000000000 -0500
@@ -0,0 +1,114 @@
+#ifndef _ABIBITS_ERRNO_H
+#define _ABIBITS_ERRNO_H
+
+#define EDOM 1
+#define EILSEQ 2
+#define ERANGE 3
+
+#define E2BIG 1001
+#define EACCES 1002
+#define EADDRINUSE 1003
+#define EADDRNOTAVAIL 1004
+#define EAFNOSUPPORT 1005
+#define EAGAIN 1006
+#define EALREADY 1007
+#define EBADF 1008
+#define EBADMSG 1009
+#define EBUSY 1010
+#define ECANCELED 1011
+#define ECHILD 1012
+#define ECONNABORTED 1013
+#define ECONNREFUSED 1014
+#define ECONNRESET 1015
+#define EDEADLK 1016
+#define EDESTADDRREQ 1017
+#define EDQUOT 1018
+#define EEXIST 1019
+#define EFAULT 1020
+#define EFBIG 1021
+#define EHOSTUNREACH 1022
+#define EIDRM 1023
+#define EINPROGRESS 1024
+#define EINTR 1025
+#define EINVAL 1026
+#define EIO 1027
+#define EISCONN 1028
+#define EISDIR 1029
+#define ELOOP 1030
+#define EMFILE 1031
+#define EMLINK 1032
+#define EMSGSIZE 1034
+#define EMULTIHOP 1035
+#define ENAMETOOLONG 1036
+#define ENETDOWN 1037
+#define ENETRESET 1038
+#define ENETUNREACH 1039
+#define ENFILE 1040
+#define ENOBUFS 1041
+#define ENODEV 1042
+#define ENOENT 1043
+#define ENOEXEC 1044
+#define ENOLCK 1045
+#define ENOLINK 1046
+#define ENOMEM 1047
+#define ENOMSG 1048
+#define ENOPROTOOPT 1049
+#define ENOSPC 1050
+#define ENOSYS 1051
+#define ENOTCONN 1052
+#define ENOTDIR 1053
+#define ENOTEMPTY 1054
+#define ENOTRECOVERABLE 1055
+#define ENOTSOCK 1056
+#define ENOTSUP 1057
+#define ENOTTY 1058
+#define ENXIO 1059
+#define EOPNOTSUPP 1060
+#define EOVERFLOW 1061
+#define EOWNERDEAD 1062
+#define EPERM 1063
+#define EPIPE 1064
+#define EPROTO 1065
+#define EPROTONOSUPPORT 1066
+#define EPROTOTYPE 1067
+#define EROFS 1068
+#define ESPIPE 1069
+#define ESRCH 1070
+#define ESTALE 1071
+#define ETIMEDOUT 1072
+#define ETXTBSY 1073
+#define EWOULDBLOCK EAGAIN
+#define EXDEV 1075
+#define ENODATA 1076
+#define ETIME 1077
+#define ENOKEY 1078
+#define ESHUTDOWN 1079
+#define EHOSTDOWN 1080
+#define EBADFD 1081
+#define ENOMEDIUM 1082
+#define ENOTBLK 1083
+#define ENONET 1084
+#define EPFNOSUPPORT 1085
+#define ESOCKTNOSUPPORT 1086
+#define ESTRPIPE 1087
+#define EREMOTEIO 1088
+#define ERFKILL 1089
+#define EBADR 1090
+#define EUNATCH 1091
+#define EMEDIUMTYPE 1092
+#define EREMOTE 1093
+#define EKEYREJECTED 1094
+#define EUCLEAN 1095
+#define EBADSLT 1096
+#define ENOANO 1097
+#define ENOCSI 1098
+#define ENOSTR 1099
+#define ETOOMANYREFS 1100
+#define ENOPKG 1101
+#define EKEYREVOKED 1102
+#define EXFULL 1103
+#define ELNRNG 1104
+#define ENOTUNIQ 1105
+#define ERESTART 1106
+#define EUSERS 1107
+#endif // _ABIBITS_ERRNO_H
diff -Nur mlibc-2.3.0/sysdeps/owlos/include/abi-bits/fcntl.h mlibc-2.3.0-owlos/sysdeps/owlos/include/abi-bits/fcntl.h
--- mlibc-2.3.0/sysdeps/owlos/include/abi-bits/fcntl.h	1969-12-31 18:00:00.000000000 -0600
+++ mlibc-2.3.0-owlos/sysdeps/owlos/include/abi-bits/fcntl.h	2022-06-20 04:58:47.000000000 -0500
@@ -0,0 +1,41 @@
+#ifndef _ABIBITS_FCNTL_H
+#define _ABIBITS_FCNTL_H
+
+// constants for fcntl()'s command argument
+#define F_DUPFD 1
+#define F_DUPFD_CLOEXEC 2
+#define F_GETFD 3
+#define F_SETFD 4
+#define F_GETFL 5
+#define F_SETFL 6
+#define F_GETLK 7
+#define F_SETLK 8
+#define F_SETLKW 9
+#define F_GETOWN 10
+#define F_SETOWN 11
+
+// constants for struct flock's l_type member
+#define F_RDLCK 1
+#define F_UNLCK 2
+#define F_WRLCK 3
+
+// constants for fcntl()'s additional argument of F_GETFD and F_SETFD
+#define FD_CLOEXEC 1
+
+// Used by mmap
+#define F_SEAL_SHRINK 0x0002
+#define F_SEAL_GROW   0x0004
+#define F_SEAL_WRITE  0x0008
+#define F_SEAL_SEAL   0x0010
+#define F_ADD_SEALS   1033
+#define F_GET_SEALS   1034
+
+#define AT_EMPTY_PATH 1
+#define AT_SYMLINK_FOLLOW 2
+#define AT_SYMLINK_NOFOLLOW 4
+#define AT_REMOVEDIR 8
+#define AT_EACCESS 512
+
+#define AT_FDCWD -100
+
+#endif // _ABITBITS_FCNTL_H
diff -Nur mlibc-2.3.0/sysdeps/owlos/include/abi-bits/gid_t.h mlibc-2.3.0-owlos/sysdeps/owlos/include/abi-bits/gid_t.h
--- mlibc-2.3.0/sysdeps/owlos/include/abi-bits/gid_t.h	1969-12-31 18:00:00.000000000 -0600
+++ mlibc-2.3.0-owlos/sysdeps/owlos/include/abi-bits/gid_t.h	2022-06-20 04:58:47.000000000 -0500
@@ -0,0 +1,8 @@
+
+#ifndef _ABIBITS_GID_T_H
+#define _ABIBITS_GID_T_H
+
+typedef unsigned int gid_t;
+
+#endif // _ABIBITS_GID_T_H
+
diff -Nur mlibc-2.3.0/sysdeps/owlos/include/abi-bits/in.h mlibc-2.3.0-owlos/sysdeps/owlos/include/abi-bits/in.h
--- mlibc-2.3.0/sysdeps/owlos/include/abi-bits/in.h	1969-12-31 18:00:00.000000000 -0600
+++ mlibc-2.3.0-owlos/sysdeps/owlos/include/abi-bits/in.h	2022-06-20 04:58:47.000000000 -0500
@@ -0,0 +1,156 @@
+#ifndef _ABIBITS_IN_H
+#define _ABIBITS_IN_H
+
+#include <bits/posix/in_addr_t.h>
+#include <bits/posix/in_port_t.h>
+#include <abi-bits/socket.h>
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+struct in_addr {
+	in_addr_t s_addr;
+};
+
+struct sockaddr_in {
+	sa_family_t sin_family;
+	in_port_t sin_port;
+	struct in_addr sin_addr;
+	uint8_t pad[8];
+};
+#define sin_zero pad		/* for BSD Unix compatibility */
+
+struct in6_addr {
+	union {
+		uint8_t __s6_addr[16];
+		uint16_t __s6_addr16[8];
+		uint32_t __s6_addr32[4];
+	} __in6_union;
+};
+#define s6_addr __in6_union.__s6_addr
+#define s6_addr16 __in6_union.__s6_addr16
+#define s6_addr32 __in6_union.__s6_addr32
+
+struct in6_pktinfo {
+	struct in6_addr ipi6_addr;
+	uint32_t ipi6_ifindex;
+};
+
+struct sockaddr_in6 {
+	sa_family_t sin6_family;
+	in_port_t sin6_port;
+	uint32_t sin6_flowinfo;
+	struct in6_addr sin6_addr;
+	uint32_t sin6_scope_id;
+};
+
+extern const struct in6_addr in6addr_any;
+extern const struct in6_addr in6addr_loopback;
+
+struct ipv6_mreq {
+	struct in6_addr ipv6mr_multiaddr;
+	unsigned ipv6mr_interface;
+};
+
+struct ip_mreq {
+	struct in_addr imr_multiaddr;
+	struct in_addr imr_interface;
+};
+
+struct ip_mreq_source {
+	struct in_addr imr_multiaddr;
+	struct in_addr imr_interface;
+	struct in_addr imr_sourceaddr;
+};
+
+struct ip_mreqn {
+	struct in_addr imr_multiaddr;
+	struct in_addr imr_address;
+	int imr_ifindex;
+};
+
+struct in_pktinfo {
+	unsigned int ipi_ifindex;
+	struct in_addr ipi_spec_dst;
+	struct in_addr ipi_addr;
+};
+
+struct group_source_req {
+	uint32_t gsr_interface;
+	struct sockaddr_storage gsr_group;
+	struct sockaddr_storage gsr_source;
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#define IN6ADDR_ANY_INIT      { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } } }
+#define IN6ADDR_LOOPBACK_INIT { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 } } }
+
+#define IPPROTO_IP 1
+#define IPPROTO_IPV6 2
+#define IPPROTO_ICMP 3
+#define IPPROTO_RAW 4
+#define IPPROTO_TCP 5
+#define IPPROTO_UDP 6
+#define IPPROTO_IGMP 7
+#define IPPROTO_IPIP 8
+#define IPPROTO_ESP 50
+#define IPPROTO_AH 51
+
+#define INADDR_ANY ((in_addr_t)0x00000000)
+#define INADDR_BROADCAST ((in_addr_t)0xffffffff)
+#define INADDR_LOOPBACK ((in_addr_t)0x7f000001)
+#define INADDR_NONE ((in_addr_t)0xffffffff)
+
+#define INET_ADDRSTRLEN 1
+
+#define INET6_ADDRSTRLEN 1
+
+#define IPV6_JOIN_GROUP 1
+#define IPV6_LEAVE_GROUP 2
+#define IPV6_MULTICAST_HOPS 3
+#define IPV6_MULTICAST_IF 4
+#define IPV6_MULTICAST_LOOP 5
+#define IPV6_UNICAST_HOPS 6
+#define IPV6_V6ONLY 7
+#define IPV6_PMTUDISC_DONT 8
+#define IPV6_PMTUDISC_DO 9
+#define IPV6_MTU_DISCOVER 23
+#define IPV6_RECVERR 25
+#define IPV6_RECVPKTINFO 49
+#define IPV6_PKTINFO 50
+#define IPV6_RECVHOPLIMIT 51
+#define IPV6_HOPLIMIT 52
+#define IPV6_TCLASS 67
+
+#define IP_TOS 1
+#define IP_TTL 2
+#define IP_OPTIONS 4
+#define IP_PKTINFO 8
+#define IP_MTU_DISCOVER 10
+#define IP_RECVERR 11
+#define IP_RECVTTL 12
+
+#define IP_DEFAULT_MULTICAST_TTL  1
+#define IP_MULTICAST_IF           32
+#define IP_MULTICAST_TTL          33
+#define IP_MULTICAST_LOOP         34
+#define IP_ADD_MEMBERSHIP         35
+#define IP_DROP_MEMBERSHIP        36
+#define IP_UNBLOCK_SOURCE         37
+#define IP_BLOCK_SOURCE           38
+#define IP_ADD_SOURCE_MEMBERSHIP  39
+#define IP_DROP_SOURCE_MEMBERSHIP 40
+#define MCAST_JOIN_SOURCE_GROUP   46
+#define MCAST_LEAVE_SOURCE_GROUP  47
+
+#define IP_PMTUDISC_DONT 0
+#define IP_PMTUDISC_DO   2
+
+#define IPV6_ADD_MEMBERSHIP  IPV6_JOIN_GROUP
+#define IPV6_DROP_MEMBERSHIP IPV6_LEAVE_GROUP
+
+#endif // _ABIBITS_IN_H
diff -Nur mlibc-2.3.0/sysdeps/owlos/include/abi-bits/ino_t.h mlibc-2.3.0-owlos/sysdeps/owlos/include/abi-bits/ino_t.h
--- mlibc-2.3.0/sysdeps/owlos/include/abi-bits/ino_t.h	1969-12-31 18:00:00.000000000 -0600
+++ mlibc-2.3.0-owlos/sysdeps/owlos/include/abi-bits/ino_t.h	2022-06-20 04:58:47.000000000 -0500
@@ -0,0 +1,9 @@
+
+#ifndef _ABIBITS_INO_T_H
+#define _ABIBITS_INO_T_H
+
+// TODO: use (u)int64_t?
+typedef long ino_t;
+
+#endif // _ABIBITS_INO_T_H
+
diff -Nur mlibc-2.3.0/sysdeps/owlos/include/abi-bits/limits.h mlibc-2.3.0-owlos/sysdeps/owlos/include/abi-bits/limits.h
--- mlibc-2.3.0/sysdeps/owlos/include/abi-bits/limits.h	1969-12-31 18:00:00.000000000 -0600
+++ mlibc-2.3.0-owlos/sysdeps/owlos/include/abi-bits/limits.h	2022-06-20 04:58:47.000000000 -0500
@@ -0,0 +1,12 @@
+#ifndef _ABIBITS_LIMITS_H
+#define _ABIBITS_LIMITS_H
+
+#define IOV_MAX 1024
+
+// Niceness related
+#define NZERO 20
+
+// Maximum hostname length, posix defines it as 255
+#define HOST_NAME_MAX 255
+
+#endif //_ABIBITS_LIMITS_H
diff -Nur mlibc-2.3.0/sysdeps/owlos/include/abi-bits/mode_t.h mlibc-2.3.0-owlos/sysdeps/owlos/include/abi-bits/mode_t.h
--- mlibc-2.3.0/sysdeps/owlos/include/abi-bits/mode_t.h	1969-12-31 18:00:00.000000000 -0600
+++ mlibc-2.3.0-owlos/sysdeps/owlos/include/abi-bits/mode_t.h	2022-06-20 04:58:47.000000000 -0500
@@ -0,0 +1,8 @@
+
+#ifndef _ABIBITS_MODE_T_H
+#define _ABIBITS_MODE_T_H
+
+typedef int mode_t;
+
+#endif // _ABIBITS_MODE_T_H
+
diff -Nur mlibc-2.3.0/sysdeps/owlos/include/abi-bits/nlink_t.h mlibc-2.3.0-owlos/sysdeps/owlos/include/abi-bits/nlink_t.h
--- mlibc-2.3.0/sysdeps/owlos/include/abi-bits/nlink_t.h	1969-12-31 18:00:00.000000000 -0600
+++ mlibc-2.3.0-owlos/sysdeps/owlos/include/abi-bits/nlink_t.h	2022-06-20 04:58:47.000000000 -0500
@@ -0,0 +1,8 @@
+
+#ifndef _ABIBITS_NLINK_T_H
+#define _ABIBITS_NLINK_T_H
+
+typedef int nlink_t;
+
+#endif // _ABIBITS_NLINK_T_H
+
diff -Nur mlibc-2.3.0/sysdeps/owlos/include/abi-bits/pid_t.h mlibc-2.3.0-owlos/sysdeps/owlos/include/abi-bits/pid_t.h
--- mlibc-2.3.0/sysdeps/owlos/include/abi-bits/pid_t.h	1969-12-31 18:00:00.000000000 -0600
+++ mlibc-2.3.0-owlos/sysdeps/owlos/include/abi-bits/pid_t.h	2022-06-20 04:58:47.000000000 -0500
@@ -0,0 +1,8 @@
+
+#ifndef _ABIBITS_PID_T_H
+#define _ABIBITS_PID_T_H
+
+typedef int pid_t;
+
+#endif // _ABIBITS_PID_T_H
+
diff -Nur mlibc-2.3.0/sysdeps/owlos/include/abi-bits/reboot.h mlibc-2.3.0-owlos/sysdeps/owlos/include/abi-bits/reboot.h
--- mlibc-2.3.0/sysdeps/owlos/include/abi-bits/reboot.h	1969-12-31 18:00:00.000000000 -0600
+++ mlibc-2.3.0-owlos/sysdeps/owlos/include/abi-bits/reboot.h	2022-07-06 19:05:40.588273819 -0500
@@ -0,0 +1,12 @@
+#ifndef _ABIBITS_REBOOT_H
+#define _ABIBITS_REBOOT_H
+
+#define RB_AUTOBOOT 0x01234567
+#define RB_HALT_SYSTEM 0xcdef0123
+#define RB_ENABLE_CAD 0x89abcdef
+#define RB_DISABLE_CAD 0
+#define RB_POWER_OFF 0x4321fedc
+#define RB_SW_SUSPEND 0xd000fce2
+#define RB_KEXEC 0x45584543
+
+#endif // _ABIBITS_REBOOT_H
diff -Nur mlibc-2.3.0/sysdeps/owlos/include/abi-bits/resource.h mlibc-2.3.0-owlos/sysdeps/owlos/include/abi-bits/resource.h
--- mlibc-2.3.0/sysdeps/owlos/include/abi-bits/resource.h	1969-12-31 18:00:00.000000000 -0600
+++ mlibc-2.3.0-owlos/sysdeps/owlos/include/abi-bits/resource.h	2022-06-20 04:58:47.000000000 -0500
@@ -0,0 +1,25 @@
+#ifndef _ABIBITS_RESOURCE_H
+#define _ABIBITS_RESOURCE_H
+
+#include <bits/posix/timeval.h>
+
+struct rusage {
+	struct timeval ru_utime;
+	struct timeval ru_stime;
+	long int ru_maxrss;
+	long int ru_ixrss;
+	long int ru_idrss;
+	long int ru_isrss;
+	long int ru_minflt;
+	long int ru_majflt;
+	long int ru_nswap;
+	long int ru_inblock;
+	long int ru_oublock;
+	long int ru_msgsnd;
+	long int ru_msgrcv;
+	long int ru_nsignals;
+	long int ru_nvcsw;
+	long int ru_nivcsw;
+};
+
+#endif // _ABIBITS_RESOURCE_H
diff -Nur mlibc-2.3.0/sysdeps/owlos/include/abi-bits/seek-whence.h mlibc-2.3.0-owlos/sysdeps/owlos/include/abi-bits/seek-whence.h
--- mlibc-2.3.0/sysdeps/owlos/include/abi-bits/seek-whence.h	1969-12-31 18:00:00.000000000 -0600
+++ mlibc-2.3.0-owlos/sysdeps/owlos/include/abi-bits/seek-whence.h	2022-06-20 04:58:47.000000000 -0500
@@ -0,0 +1,8 @@
+#ifndef _ABIBITS_SEEK_WHENCE_H
+#define _ABIBITS_SEEK_WHENCE_H
+
+#define SEEK_CUR 1
+#define SEEK_END 2
+#define SEEK_SET 3
+
+#endif // _ABIBITS_SEEK_WHENCE_H
diff -Nur mlibc-2.3.0/sysdeps/owlos/include/abi-bits/signal.h mlibc-2.3.0-owlos/sysdeps/owlos/include/abi-bits/signal.h
--- mlibc-2.3.0/sysdeps/owlos/include/abi-bits/signal.h	1969-12-31 18:00:00.000000000 -0600
+++ mlibc-2.3.0-owlos/sysdeps/owlos/include/abi-bits/signal.h	2022-06-20 04:58:47.000000000 -0500
@@ -0,0 +1,152 @@
+#ifndef _ABIBITS_SIGNAL_H
+#define _ABIBITS_SIGNAL_H
+
+#include <abi-bits/pid_t.h>
+#include <abi-bits/uid_t.h>
+#include <bits/size_t.h>
+
+union sigval {
+	int sival_int;
+	void *sival_ptr;
+};
+
+typedef struct {
+	int si_signo;
+	int si_code;
+	int si_errno;
+	pid_t si_pid;
+	uid_t si_uid;
+	void *si_addr;
+	int si_status;
+	union sigval si_value;
+} siginfo_t;
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+#define SIG_ERR ((__sighandler)(void *)(-1))
+#define SIG_DFL ((__sighandler)(void *)(-2))
+#define SIG_IGN ((__sighandler)(void *)(-3))
+
+#define SIGHUP 1
+#define SIGINT 2
+#define SIGQUIT 3
+#define SIGILL 4
+#define SIGTRAP 5
+#define SIGABRT 6
+#define SIGBUS 7
+#define SIGFPE 8
+#define SIGKILL 9
+#define SIGUSR1 10
+#define SIGSEGV 11
+#define SIGUSR2 12
+#define SIGPIPE 13
+#define SIGALRM 14
+#define SIGTERM 15
+#define SIGSTKFLT 16
+#define SIGCHLD 17
+#define SIGCONT 18
+#define SIGSTOP 19
+#define SIGTSTP 20
+#define SIGTTIN 21
+#define SIGTTOU 22
+#define SIGURG 23
+#define SIGXCPU 24
+#define SIGXFSZ 25
+#define SIGVTALRM 26
+#define SIGPROF 27
+#define SIGWINCH 28
+#define SIGIO 29
+#define SIGPOLL SIGIO
+#define SIGPWR 30
+#define SIGSYS 31
+#define SIGRTMIN 32
+#define SIGRTMAX 33
+#define SIGCANCEL 34
+
+// TODO: replace this by uint64_t
+typedef long sigset_t;
+
+#define SIGUNUSED SIGSYS
+
+// constants for sigprocmask()
+#define SIG_BLOCK 1
+#define SIG_UNBLOCK 2
+#define SIG_SETMASK 3
+
+#define SA_NOCLDSTOP (1 << 0)
+#define SA_ONSTACK (1 << 1)
+#define SA_RESETHAND (1 << 2)
+#define SA_RESTART (1 << 3)
+#define SA_SIGINFO (1 << 4)
+#define SA_NOCLDWAIT (1 << 5)
+#define SA_NODEFER (1 << 6)
+
+#define MINSIGSTKSZ 2048
+#define SIGSTKSZ 8192
+#define SS_ONSTACK 1
+#define SS_DISABLE 2
+
+typedef struct __stack {
+        void *ss_sp;
+        size_t ss_size;
+        int ss_flags;
+} stack_t;
+
+// constants for sigev_notify of struct sigevent
+#define SIGEV_NONE 1
+#define SIGEV_SIGNAL 2
+#define SIGEV_THREAD 3
+
+#define SI_ASYNCNL (-60)
+#define SI_TKILL (-6)
+#define SI_SIGIO (-5)
+#define SI_ASYNCIO (-4)
+#define SI_MESGQ (-3)
+#define SI_TIMER (-2)
+#define SI_QUEUE (-1)
+#define SI_USER 0
+#define SI_KERNEL 128
+
+#define NSIG 65
+
+#define CLD_EXITED 1
+#define CLD_KILLED 2
+#define CLD_DUMPED 3
+#define CLD_TRAPPED 4
+#define CLD_STOPPED 5
+#define CLD_CONTINUED 6
+
+struct sigevent {
+	int sigev_notify;
+	int sigev_signo;
+	union sigval sigev_value;
+	void (*sigev_notify_function)(union sigval);
+	// MISSING: sigev_notify_attributes
+};
+
+struct sigaction {
+	void (*sa_handler)(int);
+	sigset_t sa_mask;
+	int sa_flags;
+	void (*sa_sigaction)(int, siginfo_t *, void *);
+};
+
+// TODO: this struct won't work on all arches (for example aarch64) but
+// we don't have an arch specific abi folder for mlibc yet.
+typedef struct {
+	unsigned long oldmask;
+	unsigned long gregs[16];
+	unsigned long pc, pr, sr;
+	unsigned long gbr, mach, macl;
+	unsigned long fpregs[16];
+	unsigned long xfpregs[16];
+	unsigned int fpscr, fpul, ownedfp;
+} mcontext_t;
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif // _ABIBITS_SIGNAL_H
diff -Nur mlibc-2.3.0/sysdeps/owlos/include/abi-bits/socket.h mlibc-2.3.0-owlos/sysdeps/owlos/include/abi-bits/socket.h
--- mlibc-2.3.0/sysdeps/owlos/include/abi-bits/socket.h	1969-12-31 18:00:00.000000000 -0600
+++ mlibc-2.3.0-owlos/sysdeps/owlos/include/abi-bits/socket.h	2022-06-20 04:58:47.000000000 -0500
@@ -0,0 +1,125 @@
+#ifndef _ABIBITS_SOCKET_H
+#define _ABIBITS_SOCKET_H
+
+#include <bits/posix/socklen_t.h>
+#include <bits/posix/iovec.h>
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+typedef unsigned int sa_family_t;
+
+struct msghdr {
+	void *msg_name;
+	socklen_t msg_namelen;
+	struct iovec *msg_iov;
+	int msg_iovlen;
+	void *msg_control;
+	socklen_t msg_controllen;
+	int msg_flags;
+};
+
+struct sockaddr_storage {
+	sa_family_t ss_family;
+	char __padding[128 - sizeof(sa_family_t)];
+};
+
+struct mmsghdr {
+	struct msghdr msg_hdr;
+	unsigned int  msg_len;
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#define SCM_RIGHTS 1
+#define SCM_TIMESTAMP SO_TIMESTAMP
+
+//MISSING: CMSG_DATA, CMSG_NXTHDR, CMSG_FIRSTHDR
+
+#define SCM_CREDENTIALS 0x02
+
+#define SOCK_DGRAM 1
+#define SOCK_RAW 2
+#define SOCK_SEQPACKET 3
+#define SOCK_STREAM 4
+#define SOCK_NONBLOCK 0x10000
+#define SOCK_CLOEXEC 0x20000
+#define SOCK_RDM 0x40000
+
+#define SOL_SOCKET 1
+
+#define SO_ACCEPTCONN 1
+#define SO_BROADCAST 2
+#define SO_DEBUG 3
+#define SO_DONTROUTE 4
+#define SO_ERROR 5
+#define SO_KEEPALIVE 6
+#define SO_LINGER 7
+#define SO_OOBINLINE 8
+#define SO_RCVBUF 9
+#define SO_RCVLOWAT 10
+#define SO_RCVTIMEO 11
+#define SO_REUSEADDR 12
+#define SO_SNDBUF 13
+#define SO_SNDLOWAT 14
+#define SO_SNDTIMEO 15
+#define SO_TYPE 16
+#define SO_SNDBUFFORCE 17
+#define SO_PEERCRED 18
+#define SO_ATTACH_FILTER 19
+#define SO_PASSCRED 20
+#define SO_RCVBUFFORCE 21
+#define SO_DETACH_FILTER 22
+#define SO_PROTOCOL 23
+#define SO_REUSEPORT 24
+#define SO_TIMESTAMP 25
+
+#define SOMAXCONN 1
+
+#define MSG_CTRUNC 0x1
+#define MSG_DONTROUTE 0x2
+#define MSG_EOR 0x4
+#define MSG_OOB 0x8
+#define MSG_NOSIGNAL 0x10
+#define MSG_PEEK 0x20
+#define MSG_TRUNC 0x40
+#define MSG_WAITALL 0x80
+#define MSG_CONFIRM 0x800
+
+// Linux extensions.
+#define MSG_DONTWAIT 0x1000
+#define MSG_CMSG_CLOEXEC 0x2000
+
+// GNU (?) extension: Protocol family constants.
+
+#define PF_INET 1
+#define PF_INET6 2
+#define PF_UNIX 3
+#define PF_LOCAL 3
+#define PF_UNSPEC 4
+#define PF_NETLINK 5
+#define PF_BRIDGE 6
+#define PF_APPLETALK 7
+#define PF_BLUETOOTH 8
+#define PF_DECnet 9
+#define PF_IPX 10
+#define PF_ISDN 11
+#define PF_SNA 12
+#define PF_PACKET 13
+
+#define AF_INET PF_INET
+#define AF_INET6 PF_INET6
+#define AF_UNIX PF_UNIX
+#define AF_LOCAL PF_LOCAL
+#define AF_UNSPEC PF_UNSPEC
+#define AF_NETLINK PF_NETLINK
+#define AF_BRIDGE PF_BRIDGE
+#define AF_PACKET PF_PACKET
+
+#define SHUT_RD 1
+#define SHUT_RDWR 2
+#define SHUT_WR 3
+#endif
diff -Nur mlibc-2.3.0/sysdeps/owlos/include/abi-bits/stat.h mlibc-2.3.0-owlos/sysdeps/owlos/include/abi-bits/stat.h
--- mlibc-2.3.0/sysdeps/owlos/include/abi-bits/stat.h	1969-12-31 18:00:00.000000000 -0600
+++ mlibc-2.3.0-owlos/sysdeps/owlos/include/abi-bits/stat.h	2022-07-06 08:56:49.109901000 -0500
@@ -0,0 +1,69 @@
+#ifndef _ABIBITS_STAT_H
+#define _ABIBITS_STAT_H
+
+#include <abi-bits/uid_t.h>
+#include <abi-bits/gid_t.h>
+#include <bits/off_t.h>
+#include <abi-bits/mode_t.h>
+#include <abi-bits/dev_t.h>
+#include <abi-bits/ino_t.h>
+#include <abi-bits/blksize_t.h>
+#include <abi-bits/blkcnt_t.h>
+#include <abi-bits/nlink_t.h>
+#include <bits/ansi/time_t.h>
+#include <bits/ansi/timespec.h>
+
+#define S_IFMT 0x0F000
+#define S_IFBLK 0x06000
+#define S_IFCHR 0x02000
+#define S_IFIFO 0x01000
+#define S_IFREG 0x08000
+#define S_IFDIR 0x04000
+#define S_IFLNK 0x0A000
+#define S_IFSOCK 0x0C000
+
+#define S_IRWXU 0700
+#define S_IRUSR 0400
+#define S_IWUSR 0200
+#define S_IXUSR 0100
+#define S_IRWXG 070
+#define S_IRGRP 040
+#define S_IWGRP 020
+#define S_IXGRP 010
+#define S_IRWXO 07
+#define S_IROTH 04
+#define S_IWOTH 02
+#define S_IXOTH 01
+#define S_ISUID 04000
+#define S_ISGID 02000
+#define S_ISVTX 01000
+
+#define S_IREAD  S_IRUSR
+#define S_IWRITE S_IWUSR
+#define S_IEXEC  S_IXUSR
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+struct stat {
+	dev_t st_dev;
+	ino_t st_ino;
+	mode_t st_mode;
+	nlink_t st_nlink;
+	uid_t st_uid;
+	gid_t st_gid;
+	dev_t st_rdev;
+	off_t st_size;
+	struct timespec st_atim;
+	struct timespec st_mtim;
+	struct timespec st_ctim;
+	blksize_t st_blksize;
+	blkcnt_t st_blocks;
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif // _ABIBITS_STAT_H
diff -Nur mlibc-2.3.0/sysdeps/owlos/include/abi-bits/termios.h mlibc-2.3.0-owlos/sysdeps/owlos/include/abi-bits/termios.h
--- mlibc-2.3.0/sysdeps/owlos/include/abi-bits/termios.h	1969-12-31 18:00:00.000000000 -0600
+++ mlibc-2.3.0-owlos/sysdeps/owlos/include/abi-bits/termios.h	2022-06-20 04:58:47.000000000 -0500
@@ -0,0 +1,32 @@
+#ifndef _ABIBITS_TERMIOS_H
+#define _ABIBITS_TERMIOS_H
+
+typedef unsigned int cc_t;
+typedef unsigned int speed_t;
+typedef unsigned int tcflag_t;
+
+// indices for the c_cc array in struct termios
+#define NCCS    11
+#define VEOF     0
+#define VEOL     1
+#define VERASE   2
+#define VINTR    3
+#define VKILL    4
+#define VMIN     5
+#define VQUIT    6
+#define VSTART   7
+#define VSTOP    8
+#define VSUSP    9
+#define VTIME   10
+
+struct termios {
+	tcflag_t c_iflag;
+	tcflag_t c_oflag;
+	tcflag_t c_cflag;
+	tcflag_t c_lflag;
+	cc_t c_cc[NCCS];
+	speed_t ibaud;
+	speed_t obaud;
+};
+
+#endif
diff -Nur mlibc-2.3.0/sysdeps/owlos/include/abi-bits/time.h mlibc-2.3.0-owlos/sysdeps/owlos/include/abi-bits/time.h
--- mlibc-2.3.0/sysdeps/owlos/include/abi-bits/time.h	1969-12-31 18:00:00.000000000 -0600
+++ mlibc-2.3.0-owlos/sysdeps/owlos/include/abi-bits/time.h	2022-06-20 04:58:47.000000000 -0500
@@ -0,0 +1,15 @@
+#ifndef _ABIBITS_TIME_H
+#define _ABIBITS_TIME_H
+
+#include <bits/posix/timeval.h>
+
+struct itimerval {
+	struct timeval it_interval;	/* Interval for periodic timer */
+	struct timeval it_value;	/* Time until next expiration */
+};
+
+#define ITIMER_REAL	0
+#define ITIMER_VIRTUAL	1
+#define ITIMER_PROF	2
+
+#endif // _ABIBITS_TIME_H
diff -Nur mlibc-2.3.0/sysdeps/owlos/include/abi-bits/uid_t.h mlibc-2.3.0-owlos/sysdeps/owlos/include/abi-bits/uid_t.h
--- mlibc-2.3.0/sysdeps/owlos/include/abi-bits/uid_t.h	1969-12-31 18:00:00.000000000 -0600
+++ mlibc-2.3.0-owlos/sysdeps/owlos/include/abi-bits/uid_t.h	2022-06-20 04:58:47.000000000 -0500
@@ -0,0 +1,8 @@
+
+#ifndef _ABIBITS_UID_T_H
+#define _ABIBITS_UID_T_H
+
+typedef unsigned int uid_t;
+
+#endif // _ABIBITS_UID_T_H
+
diff -Nur mlibc-2.3.0/sysdeps/owlos/include/abi-bits/utsname.h mlibc-2.3.0-owlos/sysdeps/owlos/include/abi-bits/utsname.h
--- mlibc-2.3.0/sysdeps/owlos/include/abi-bits/utsname.h	1969-12-31 18:00:00.000000000 -0600
+++ mlibc-2.3.0-owlos/sysdeps/owlos/include/abi-bits/utsname.h	2022-06-20 04:58:47.000000000 -0500
@@ -0,0 +1,12 @@
+#ifndef _ABIBITS_UTSNAME_T_H
+#define _ABIBITS_UTSNAME_T_H
+
+struct utsname {
+	char sysname[65];
+	char nodename[65];
+	char release[65];
+	char version[65];
+	char machine[65];
+};
+
+#endif // _ABIBITS_UTSNAME_T_H
diff -Nur mlibc-2.3.0/sysdeps/owlos/include/abi-bits/vm-flags.h mlibc-2.3.0-owlos/sysdeps/owlos/include/abi-bits/vm-flags.h
--- mlibc-2.3.0/sysdeps/owlos/include/abi-bits/vm-flags.h	1969-12-31 18:00:00.000000000 -0600
+++ mlibc-2.3.0-owlos/sysdeps/owlos/include/abi-bits/vm-flags.h	2022-06-20 04:58:47.000000000 -0500
@@ -0,0 +1,42 @@
+#ifndef _ABIBITS_MMAP_FLAGS_H
+#define _ABIBITS_MMAP_FLAGS_H
+
+#define PROT_NONE  0x00
+#define PROT_READ  0x01
+#define PROT_WRITE 0x02
+#define PROT_EXEC  0x04
+
+#define MAP_FAILED ((void *)(-1))
+#define MAP_FILE      0x00
+#define MAP_PRIVATE   0x01
+#define MAP_SHARED    0x02
+#define MAP_FIXED     0x04
+#define MAP_ANON      0x08
+#define MAP_ANONYMOUS 0x08
+#define MAP_NORESERVE 0x10
+
+#define MS_ASYNC 0x01
+#define MS_SYNC 0x02
+#define MS_INVALIDATE 0x04
+
+#define MCL_CURRENT 0x01
+#define MCL_FUTURE 0x02
+
+#define POSIX_MADV_NORMAL 1
+#define POSIX_MADV_SEQUENTIAL 2
+#define POSIX_MADV_RANDOM 3
+#define POSIX_MADV_DONTNEED 4
+#define POSIX_MADV_WILLNEED 5
+
+#define MADV_NORMAL 0
+#define MADV_RANDOM 1
+#define MADV_SEQUENTIAL 2
+#define MADV_WILLNEED 3
+#define MADV_DONTNEED 4
+#define MADV_FREE 8
+
+// Linux extension:
+#define MREMAP_MAYMOVE 1
+#define MREMAP_FIXED 2
+
+#endif // _ABIBITS_MMAP_FLAGS_H
diff -Nur mlibc-2.3.0/sysdeps/owlos/include/abi-bits/wait.h mlibc-2.3.0-owlos/sysdeps/owlos/include/abi-bits/wait.h
--- mlibc-2.3.0/sysdeps/owlos/include/abi-bits/wait.h	1969-12-31 18:00:00.000000000 -0600
+++ mlibc-2.3.0-owlos/sysdeps/owlos/include/abi-bits/wait.h	2022-06-20 04:58:47.000000000 -0500
@@ -0,0 +1,25 @@
+#ifndef _ABIBITS_WAIT_H
+#define _ABIBITS_WAIT_H
+
+#define WCONTINUED 1
+#define WNOHANG 2
+#define WUNTRACED 4
+#define WEXITED 8
+#define WNOWAIT 16
+#define WSTOPPED 32
+
+#define __WALL 0x40000000
+#define __WCLONE 0x80000000
+
+#define WCOREFLAG 0x80
+
+#define WEXITSTATUS(x) ((x) & 0x000000FF)
+#define WIFCONTINUED(x) ((x) & 0x00000100)
+#define WIFEXITED(x) ((x) & 0x00000200)
+#define WIFSIGNALED(x) ((x) & 0x00000400)
+#define WIFSTOPPED(x) ((x) & 0x00000800)
+#define WSTOPSIG(x) (((x) & 0x00FF0000) >> 16)
+#define WTERMSIG(x) (((x) & 0xFF000000) >> 24)
+#define WCOREDUMP(x) ((x) & WCOREFLAG)
+
+#endif //_ABIBITS_WAIT_H
diff -Nur mlibc-2.3.0/sysdeps/owlos/include/mlibc/thread-entry.hpp mlibc-2.3.0-owlos/sysdeps/owlos/include/mlibc/thread-entry.hpp
--- mlibc-2.3.0/sysdeps/owlos/include/mlibc/thread-entry.hpp	1969-12-31 18:00:00.000000000 -0600
+++ mlibc-2.3.0-owlos/sysdeps/owlos/include/mlibc/thread-entry.hpp	2022-07-06 16:12:49.559436754 -0500
@@ -0,0 +1,10 @@
+#pragma once
+
+#include <mlibc/tcb.hpp>
+
+extern "C" void __mlibc_start_thread(void);
+extern "C" void __mlibc_enter_thread(void *entry, void *user_arg, Tcb *tcb);
+
+namespace mlibc {
+void *prepare_stack(void *entry, void *user_arg, void *tcb);
+} // namespace mlibc
diff -Nur mlibc-2.3.0/sysdeps/owlos/include/owlos/mmap_args.h mlibc-2.3.0-owlos/sysdeps/owlos/include/owlos/mmap_args.h
--- mlibc-2.3.0/sysdeps/owlos/include/owlos/mmap_args.h	1969-12-31 18:00:00.000000000 -0600
+++ mlibc-2.3.0-owlos/sysdeps/owlos/include/owlos/mmap_args.h	2022-07-06 16:59:57.452911011 -0500
@@ -0,0 +1,15 @@
+#ifndef _OWLOS_MMAP_ARGS_H
+#define _OWLOS_MMAP_ARGS_H
+
+#include <stdint.h>
+
+struct owlOS_MmapArgs {
+    uintptr_t addr;
+    uintptr_t size;
+    uintptr_t prot;
+    uintptr_t flags;
+    uintptr_t fd;
+    intptr_t offset;
+};
+
+#endif
\ No newline at end of file
diff -Nur mlibc-2.3.0/sysdeps/owlos/include/owlos/syscall.h mlibc-2.3.0-owlos/sysdeps/owlos/include/owlos/syscall.h
--- mlibc-2.3.0/sysdeps/owlos/include/owlos/syscall.h	1969-12-31 18:00:00.000000000 -0600
+++ mlibc-2.3.0-owlos/sysdeps/owlos/include/owlos/syscall.h	2022-07-06 19:00:28.830840091 -0500
@@ -0,0 +1,106 @@
+
+#ifndef SYSCALL_H
+#define SYSCALL_H
+
+#include <stdint.h>
+
+#define SYS_YIELD 0
+#define SYS_EXIT 1
+#define SYS_FORK 2
+#define SYS_OPEN 3
+#define SYS_CLOSE 4
+#define SYS_READ 5
+#define SYS_WRITE 6
+#define SYS_LSEEK 7
+#define SYS_DUP 8
+#define SYS_LINK_RESERVED 9
+#define SYS_UNLINK 10
+#define SYS_STAT 11
+#define SYS_FSTAT 12
+#define SYS_ACCESS 13
+#define SYS_CHMOD 14
+#define SYS_CHOWN 15
+#define SYS_UMASK 16
+#define SYS_IOCTL 17
+#define SYS_EXECVE 18
+#define SYS_POLLPID 19
+#define SYS_GETUID 20
+#define SYS_GETEUID 21
+#define SYS_GETGID 22
+#define SYS_GETEGID 23
+#define SYS_SETGROUPS 24
+#define SYS_GETGROUPS 25
+#define SYS_GETPID 26
+#define SYS_GETPPID 27
+#define SYS_SETPGID 28
+#define SYS_GETPGRP 29
+#define SYS_SIGNAL 30
+#define SYS_KILL 31
+#define SYS_SIGRETURN 32
+#define SYS_CLOCK_GET 33
+#define SYS_CHDIR 34
+#define SYS_GETCWD 35
+#define SYS_PIPE 36
+#define SYS_MMAP 37
+#define SYS_MUNMAP 38
+#define SYS_FUTEX_WAIT 39
+#define SYS_FUTEX_WAKE 40
+#define SYS_FOXKERNEL_POWERCTL 0xf0
+#define SYS_FOXKERNEL_LOG 0xf1
+
+#define UNIMPLEMENTED(FUNCTION_NAME)                                           \
+    {                                                                          \
+        sys_libc_log("Unimplemented syscall: " FUNCTION_NAME);                 \
+        sys_exit(1);                                                           \
+        __builtin_unreachable();                                               \
+    }
+
+#ifdef __cplusplus
+extern "C"{
+#endif
+
+__attribute__((always_inline))
+static inline long syscalln0(uint64_t call) {
+    volatile long ret;
+    asm volatile("syscall" : "=a"(ret) : "a"(call)); 
+    return ret;
+}
+
+__attribute__((always_inline))
+static long syscalln1(uint64_t call, uint64_t arg0) {
+    volatile long ret;
+    asm volatile("syscall" : "=a"(ret) : "a"(call), "D"(arg0) : "memory"); 
+    return ret;
+}
+
+__attribute__((always_inline))
+static long syscalln2(uint64_t call, uint64_t arg0, uint64_t arg1) {
+    volatile long ret;
+    asm volatile("syscall" : "=a"(ret) : "a"(call), "D"(arg0), "S"(arg1) : "memory"); 
+    return ret;
+}
+
+__attribute__((always_inline))
+static long syscalln3(uint64_t call, uint64_t arg0, uint64_t arg1, uint64_t arg2) {
+    volatile long ret;
+    asm volatile("syscall" : "=a"(ret) : "a"(call), "D"(arg0), "S"(arg1), "d"(arg2) : "memory"); 
+    return ret;
+}
+
+#ifdef __cplusplus
+}
+__attribute__((always_inline)) static inline long _syscall(uint64_t call) { return syscalln0(call); }
+__attribute__((always_inline)) static inline long _syscall(uint64_t call, uint64_t arg0) { return syscalln1(call, arg0); }
+__attribute__((always_inline)) static inline long _syscall(uint64_t call, uint64_t arg0, uint64_t arg1) { return syscalln2(call, arg0, arg1); }
+__attribute__((always_inline)) static inline long _syscall(uint64_t call, uint64_t arg0, uint64_t arg1, uint64_t arg2) { return syscalln3(call, arg0, arg1, arg2); }
+
+template<typename... T>
+__attribute__((always_inline)) static inline long syscall(uint64_t call, T... args){
+    return _syscall(call, (uint64_t)(args)...);
+}
+#else
+    #define GET_SYSCALL(a0, a1, a2, a3, a4, a5, a6, name, ...) name
+    #define syscall(...) GET_SYSCALL(__VA_ARGS__, syscalln6, syscalln5, syscalln4, syscalln3, syscalln2, syscalln1, syscalln0)(__VA_ARGS__) 
+#endif
+
+#endif
\ No newline at end of file
diff -Nur mlibc-2.3.0/sysdeps/owlos/meson.build mlibc-2.3.0-owlos/sysdeps/owlos/meson.build
--- mlibc-2.3.0/sysdeps/owlos/meson.build	1969-12-31 18:00:00.000000000 -0600
+++ mlibc-2.3.0-owlos/sysdeps/owlos/meson.build	2022-07-06 19:22:14.923516588 -0500
@@ -0,0 +1,66 @@
+
+rtdl_sources += files(
+	'generic/generic.cpp'
+)
+
+libc_sources += files(
+	'generic/entry.cpp',
+	'generic/generic.cpp',
+	'generic/thread.cpp',
+)
+
+if not no_headers
+	install_headers(
+		'include/abi-bits/abi.h',
+		'include/abi-bits/auxv.h',
+		'include/abi-bits/seek-whence.h',
+		'include/abi-bits/vm-flags.h',
+		'include/abi-bits/errno.h',
+		'include/abi-bits/fcntl.h',
+		'include/abi-bits/in.h',
+		'include/abi-bits/resource.h',
+		'include/abi-bits/signal.h',
+		'include/abi-bits/stat.h',
+		'include/abi-bits/socket.h',
+		'include/abi-bits/termios.h',
+		'include/abi-bits/time.h',
+		'include/abi-bits/blkcnt_t.h',
+		'include/abi-bits/blksize_t.h',
+		'include/abi-bits/dev_t.h',
+		'include/abi-bits/gid_t.h',
+		'include/abi-bits/ino_t.h',
+		'include/abi-bits/mode_t.h',
+		'include/abi-bits/nlink_t.h',
+		'include/abi-bits/pid_t.h',
+		'include/abi-bits/uid_t.h',
+		'include/abi-bits/access.h',
+		'include/abi-bits/wait.h',
+		'include/abi-bits/limits.h',
+		'include/abi-bits/utsname.h',
+		subdir: 'abi-bits'
+	)
+	install_headers(
+		'include/owlos/syscall.h',
+		'include/owlos/mmap_args.h',
+		subdir: 'owlos'
+	)
+endif
+
+if not headers_only
+	if host_machine.cpu_family() == 'x86_64'
+		crt = custom_target('crt0',
+			build_by_default: true,
+			command: c_compiler.cmd_array() + ['-c', '-o', '@OUTPUT@', '@INPUT@'],
+			input: 'AMD64/crt0.S',
+			output: 'crt0.o',
+			install: true,
+			install_dir: get_option('libdir')
+		)
+		libc_sources += files(
+			'AMD64/thread_entry.S',
+		)
+	else
+		error('Unknown architecture')
+	endif
+endif
+
