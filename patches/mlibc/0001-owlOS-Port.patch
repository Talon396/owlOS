From 57c3a5754b0d7cddc6de4555df6d499700e2e7a7 Mon Sep 17 00:00:00 2001
From: Talon396 <105325988+Talon396@users.noreply.github.com>
Date: Wed, 27 Jul 2022 12:49:04 -0500
Subject: [PATCH] owlOS Port

Signed-off-by: Talon396 <105325988+Talon396@users.noreply.github.com>
---
 abis/owlos/auxv.h                            |  12 +
 ci/owlos.cross-file                          |  12 +
 meson.build                                  |   4 +
 options/rtdl/generic/linker.cpp              |   6 +-
 sysdeps/owlos/AMD64/crt0.S                   |   5 +
 sysdeps/owlos/AMD64/thread_entry.S           |   7 +
 sysdeps/owlos/generic/entry.cpp              |  32 ++
 sysdeps/owlos/generic/generic.cpp            | 358 +++++++++++++++++++
 sysdeps/owlos/generic/thread.cpp             |  39 ++
 sysdeps/owlos/include/abi-bits/abi.h         |   1 +
 sysdeps/owlos/include/abi-bits/access.h      |   1 +
 sysdeps/owlos/include/abi-bits/auxv.h        |   1 +
 sysdeps/owlos/include/abi-bits/blkcnt_t.h    |   1 +
 sysdeps/owlos/include/abi-bits/blksize_t.h   |   1 +
 sysdeps/owlos/include/abi-bits/dev_t.h       |   1 +
 sysdeps/owlos/include/abi-bits/errno.h       |   1 +
 sysdeps/owlos/include/abi-bits/fcntl.h       |   1 +
 sysdeps/owlos/include/abi-bits/gid_t.h       |   1 +
 sysdeps/owlos/include/abi-bits/in.h          |   1 +
 sysdeps/owlos/include/abi-bits/ino_t.h       |   1 +
 sysdeps/owlos/include/abi-bits/limits.h      |   1 +
 sysdeps/owlos/include/abi-bits/mode_t.h      |   1 +
 sysdeps/owlos/include/abi-bits/nlink_t.h     |   1 +
 sysdeps/owlos/include/abi-bits/pid_t.h       |   1 +
 sysdeps/owlos/include/abi-bits/reboot.h      |   1 +
 sysdeps/owlos/include/abi-bits/resource.h    |   1 +
 sysdeps/owlos/include/abi-bits/seek-whence.h |   1 +
 sysdeps/owlos/include/abi-bits/signal.h      |   1 +
 sysdeps/owlos/include/abi-bits/socket.h      |   1 +
 sysdeps/owlos/include/abi-bits/stat.h        |   1 +
 sysdeps/owlos/include/abi-bits/termios.h     |   1 +
 sysdeps/owlos/include/abi-bits/time.h        |   1 +
 sysdeps/owlos/include/abi-bits/uid_t.h       |   1 +
 sysdeps/owlos/include/abi-bits/utsname.h     |   1 +
 sysdeps/owlos/include/abi-bits/vm-flags.h    |   1 +
 sysdeps/owlos/include/abi-bits/wait.h        |   1 +
 sysdeps/owlos/include/mlibc/thread-entry.hpp |  10 +
 sysdeps/owlos/include/owlos/mmap_args.h      |  15 +
 sysdeps/owlos/include/owlos/syscall.h        | 107 ++++++
 sysdeps/owlos/meson.build                    |  66 ++++
 40 files changed, 697 insertions(+), 3 deletions(-)
 create mode 100644 abis/owlos/auxv.h
 create mode 100644 ci/owlos.cross-file
 create mode 100644 sysdeps/owlos/AMD64/crt0.S
 create mode 100644 sysdeps/owlos/AMD64/thread_entry.S
 create mode 100644 sysdeps/owlos/generic/entry.cpp
 create mode 100644 sysdeps/owlos/generic/generic.cpp
 create mode 100644 sysdeps/owlos/generic/thread.cpp
 create mode 120000 sysdeps/owlos/include/abi-bits/abi.h
 create mode 120000 sysdeps/owlos/include/abi-bits/access.h
 create mode 120000 sysdeps/owlos/include/abi-bits/auxv.h
 create mode 120000 sysdeps/owlos/include/abi-bits/blkcnt_t.h
 create mode 120000 sysdeps/owlos/include/abi-bits/blksize_t.h
 create mode 120000 sysdeps/owlos/include/abi-bits/dev_t.h
 create mode 120000 sysdeps/owlos/include/abi-bits/errno.h
 create mode 120000 sysdeps/owlos/include/abi-bits/fcntl.h
 create mode 120000 sysdeps/owlos/include/abi-bits/gid_t.h
 create mode 120000 sysdeps/owlos/include/abi-bits/in.h
 create mode 120000 sysdeps/owlos/include/abi-bits/ino_t.h
 create mode 120000 sysdeps/owlos/include/abi-bits/limits.h
 create mode 120000 sysdeps/owlos/include/abi-bits/mode_t.h
 create mode 120000 sysdeps/owlos/include/abi-bits/nlink_t.h
 create mode 120000 sysdeps/owlos/include/abi-bits/pid_t.h
 create mode 120000 sysdeps/owlos/include/abi-bits/reboot.h
 create mode 120000 sysdeps/owlos/include/abi-bits/resource.h
 create mode 120000 sysdeps/owlos/include/abi-bits/seek-whence.h
 create mode 120000 sysdeps/owlos/include/abi-bits/signal.h
 create mode 120000 sysdeps/owlos/include/abi-bits/socket.h
 create mode 120000 sysdeps/owlos/include/abi-bits/stat.h
 create mode 120000 sysdeps/owlos/include/abi-bits/termios.h
 create mode 120000 sysdeps/owlos/include/abi-bits/time.h
 create mode 120000 sysdeps/owlos/include/abi-bits/uid_t.h
 create mode 120000 sysdeps/owlos/include/abi-bits/utsname.h
 create mode 120000 sysdeps/owlos/include/abi-bits/vm-flags.h
 create mode 120000 sysdeps/owlos/include/abi-bits/wait.h
 create mode 100644 sysdeps/owlos/include/mlibc/thread-entry.hpp
 create mode 100644 sysdeps/owlos/include/owlos/mmap_args.h
 create mode 100644 sysdeps/owlos/include/owlos/syscall.h
 create mode 100644 sysdeps/owlos/meson.build

diff --git a/abis/owlos/auxv.h b/abis/owlos/auxv.h
new file mode 100644
index 00000000..09322826
--- /dev/null
+++ b/abis/owlos/auxv.h
@@ -0,0 +1,12 @@
+#ifndef _ABIBITS_AUXV_H
+#define _ABIBITS_AUXV_H
+
+#define AT_ENTRY 10
+#define AT_PHDR 20
+#define AT_PHENT 21
+#define AT_PHNUM 22
+#define AT_SECURE 23
+#define AT_RANDOM 25
+#define AT_EXECFN 31
+
+#endif // _ABIBITS_AUXV_H
diff --git a/ci/owlos.cross-file b/ci/owlos.cross-file
new file mode 100644
index 00000000..4dd3e737
--- /dev/null
+++ b/ci/owlos.cross-file
@@ -0,0 +1,12 @@
+[binaries]
+c = 'gcc-10'
+cpp = 'g++-10'
+
+[properties]
+needs_exe_wrapper = true
+
+[host_machine]
+system = 'owlos'
+cpu_family = 'x86_64'
+cpu = 'x86_64'
+endian = 'little'
diff --git a/meson.build b/meson.build
index fd95bb4a..8869fe1c 100644
--- a/meson.build
+++ b/meson.build
@@ -142,6 +142,10 @@ elif host_machine.system() == 'dripos'
 	rtdl_include_dirs += include_directories('sysdeps/dripos/include')
 	libc_include_dirs += include_directories('sysdeps/dripos/include')
 	subdir('sysdeps/dripos')
+elif host_machine.system() == 'owlos'
+	rtdl_include_dirs += include_directories('sysdeps/owlos/include')
+	libc_include_dirs += include_directories('sysdeps/owlos/include')
+	subdir('sysdeps/owlos')
 else
 	error('No sysdeps defined for OS: ' + host_machine.system())
 endif
diff --git a/options/rtdl/generic/linker.cpp b/options/rtdl/generic/linker.cpp
index ffdf5c34..0f5813c1 100644
--- a/options/rtdl/generic/linker.cpp
+++ b/options/rtdl/generic/linker.cpp
@@ -12,9 +12,9 @@
 
 uintptr_t libraryBase = 0x41000000;
 
-bool verbose = false;
-bool stillSlightlyVerbose = false;
-bool logBaseAddresses = false;
+bool verbose = true;
+bool stillSlightlyVerbose = true;
+bool logBaseAddresses = true;
 bool eagerBinding = true;
 
 #if defined(__x86_64__)
diff --git a/sysdeps/owlos/AMD64/crt0.S b/sysdeps/owlos/AMD64/crt0.S
new file mode 100644
index 00000000..06ab8a70
--- /dev/null
+++ b/sysdeps/owlos/AMD64/crt0.S
@@ -0,0 +1,5 @@
+.section .text
+.global _start
+_start:
+    mov $main, %rdi
+    call __mlibc_entry
diff --git a/sysdeps/owlos/AMD64/thread_entry.S b/sysdeps/owlos/AMD64/thread_entry.S
new file mode 100644
index 00000000..7a78a409
--- /dev/null
+++ b/sysdeps/owlos/AMD64/thread_entry.S
@@ -0,0 +1,7 @@
+.section .text
+.global __mlibc_start_thread
+__mlibc_start_thread:
+	pop %rdi
+	pop %rsi
+	pop %rdx
+	call __mlibc_enter_thread
diff --git a/sysdeps/owlos/generic/entry.cpp b/sysdeps/owlos/generic/entry.cpp
new file mode 100644
index 00000000..a59b55a5
--- /dev/null
+++ b/sysdeps/owlos/generic/entry.cpp
@@ -0,0 +1,32 @@
+#include <stdint.h>
+#include <stdlib.h>
+#include <bits/ensure.h>
+#include <mlibc/elf/startup.h>
+
+// defined by the POSIX library
+void __mlibc_initLocale();
+
+extern "C" uintptr_t *__dlapi_entrystack();
+
+extern char **environ;
+static mlibc::exec_stack_data __mlibc_stack_data;
+
+struct LibraryGuard {
+	LibraryGuard();
+};
+
+static LibraryGuard guard;
+
+LibraryGuard::LibraryGuard() {
+	__mlibc_initLocale();
+
+	// Parse the exec() stack.
+	mlibc::parse_exec_stack(__dlapi_entrystack(), &__mlibc_stack_data);
+	mlibc::set_startup_data(__mlibc_stack_data.argc, __mlibc_stack_data.argv,
+			__mlibc_stack_data.envp);
+}
+
+extern "C" void __mlibc_entry(int (*main_fn)(int argc, char *argv[], char *env[])) {
+	auto result = main_fn(__mlibc_stack_data.argc, __mlibc_stack_data.argv, environ);
+	exit(result);
+}
\ No newline at end of file
diff --git a/sysdeps/owlos/generic/generic.cpp b/sysdeps/owlos/generic/generic.cpp
new file mode 100644
index 00000000..22493015
--- /dev/null
+++ b/sysdeps/owlos/generic/generic.cpp
@@ -0,0 +1,358 @@
+#include <owlos/syscall.h>
+#include <owlos/mmap_args.h>
+#include <stddef.h>
+#include <bits/ensure.h>
+#include <abi-bits/pid_t.h>
+#include <mlibc/all-sysdeps.hpp>
+#include <mlibc/debug.hpp>
+#include <mlibc/thread-entry.hpp>
+#include <errno.h>
+#include <dirent.h>
+#include <errno.h>
+#include <fcntl.h>
+#include <limits.h>
+#include <sys/resource.h>
+#include <sys/ioctl.h>
+#include <sys/stat.h>
+#include <sys/types.h>
+
+namespace mlibc {
+    // CORE
+    int sys_futex_tid() {
+        return syscall(SYS_GETPID);
+    }
+    int sys_futex_wait(int *pointer, int expected, const struct timespec *time) {
+        mlibc::infoLogger() << "sys_futex_wait() not implemented" << frg::endlog;
+        return 0;
+    }
+    int sys_futex_wake(int *pointer) {
+        mlibc::infoLogger() << "sys_futex_wake() not implemented" << frg::endlog;
+        return 0;
+    }
+    int sys_tcb_set(void *pointer) {
+        syscall(SYS_SET_THREAD_AREA,pointer);
+        return 0;
+    }
+    int sys_vm_map(void *hint, size_t size, int prot, int flags, int fd, off_t offset, void **window) {
+        struct owlOS_MmapArgs args;
+        args.addr = (uintptr_t)hint;
+        args.size = (uintptr_t)size;
+        args.prot = (uintptr_t)prot;
+        args.flags = (uintptr_t)flags;
+        args.fd = (uintptr_t)fd;
+        args.offset = (intptr_t)offset;
+        auto result = syscall(SYS_MMAP, &args);
+        if (result < 0) {
+            return -result;
+        }
+        *window = (void *)result;
+        return 0;
+    }
+    int sys_vm_unmap(void *address, size_t size) {
+        auto result = syscall(SYS_MUNMAP, address, size);
+        if(result < 0 ) {
+            return -result;
+        }
+        return 0;
+    }
+    int sys_anon_allocate(size_t size, void **pointer) {
+        return sys_vm_map((void*)0,size,3,MAP_ANONYMOUS | MAP_PRIVATE,-1,0,pointer);
+    }
+    int sys_anon_free(void *pointer, size_t size) {
+        return sys_vm_unmap(pointer, size);
+    }
+    void sys_libc_panic() {
+        sys_libc_log("mlibc panic");
+        sys_exit(1);
+    }
+    void sys_libc_log(const char *msg) {
+        syscall(SYS_FOXKERNEL_LOG, msg);
+    }
+    void sys_exit(int status) {
+        syscall(SYS_EXIT, status);
+
+        __builtin_unreachable();
+    }
+    #ifndef MLIBC_BUILDING_RTDL
+    pid_t sys_getpid() {
+        return syscall(SYS_GETPID);
+    }
+    int sys_kill(int pid, int sig) {
+        auto result = syscall(SYS_KILL, pid, sig);
+        if(result < 0) {
+            return -result;
+        }
+        return result;
+    }
+    pid_t sys_getpgid(pid_t pid, pid_t *pgid) {
+        *pgid = syscall(SYS_GETPGRP);
+        return 0;
+    }
+    pid_t sys_getppid() {
+        return syscall(SYS_GETPPID);
+    }
+    int sys_clock_get(int clock, time_t *secs, long *nanos) {
+        return syscall(SYS_CLOCK_GET,secs,nanos);
+    }
+    int sys_getcwd(char *buffer, size_t size) {
+        auto result = syscall(SYS_GETCWD, buffer, size);
+        return 0;
+    }
+    int sys_chdir(const char *path) {
+        auto result = syscall(SYS_CHDIR, path);
+        return 0;
+    }
+    int sys_gethostname(char *buffer, size_t bufsize) {
+        UNIMPLEMENTED("sys_gethostname")
+    }
+    int sys_sleep(time_t *sec, long *nanosec) {
+        struct timespec deadline, current;
+        sys_clock_get(0,&deadline.tv_sec,&deadline.tv_nsec);
+        deadline.tv_sec += *sec;
+        deadline.tv_nsec += *nanosec;
+        while(1) {
+            sys_clock_get(0,&current.tv_sec,&current.tv_nsec);
+            if(current.tv_sec > deadline.tv_sec || (current.tv_sec == deadline.tv_sec && current.tv_nsec >= deadline.tv_nsec)) {
+                break;
+            }
+            sys_yield();
+        }
+        return 0;
+    }
+    uid_t sys_getuid() {
+        return syscall(SYS_GETUID);
+    }
+    uid_t sys_geteuid() {
+        return syscall(SYS_GETEUID);
+    }
+    int sys_setuid(uid_t uid) UNIMPLEMENTED("sys_setuid")
+    int sys_seteuid(uid_t euid) UNIMPLEMENTED("sys_seteuid")
+    gid_t sys_getgid() {
+        return syscall(SYS_GETGID);
+    }
+    gid_t sys_getegid() {
+        return syscall(SYS_GETEGID);
+    }
+    int sys_setgid(gid_t gid) {
+        mlibc::infoLogger() << "mlibc: sys_setgid not implemented" << frg::endlog;
+        return 0;
+    }
+    int sys_setegid(gid_t egid) {
+        mlibc::infoLogger() << "mlibc: sys_setegid not implemented" << frg::endlog;
+        return 0;
+    }
+    void sys_yield() {
+        syscall(SYS_YIELD);
+    }
+    int sys_clone(void *entry, void *user_arg, void *tcb, pid_t *tid_out) {
+        //*tid_out = syscall(SYS_FORK,(uintptr_t)__mlibc_start_thread,prepare_stack(entry, user_arg, tcb));
+        mlibc::infoLogger() << "mlibc: sys_clone not implemented" << frg::endlog;
+        return 0;
+    }
+    void sys_thread_exit() UNIMPLEMENTED("sys_thread_exit")
+    int sys_waitpid(pid_t pid, int *status, int flags, pid_t *ret_pid) {
+        int result = syscall(SYS_POLLPID, pid, status, flags);
+        while(result == 0) {
+            sys_yield();
+            result = syscall(SYS_POLLPID, pid, status, flags);
+        }
+        if(result < 0) {
+            return -result;
+        }
+        *ret_pid = (pid_t)result;
+        return 0;
+    }
+    int sys_fork(pid_t *child) {
+        auto result = syscall(SYS_FORK,0,0);
+        if (result < 0) {
+            return -result;
+        }
+        *child = result;
+        return 0;
+    }
+    int sys_execve(const char *path, char *const argv[], char *const envp[]) {
+        auto result = syscall(SYS_EXECVE, path, argv, envp);
+        if (result < 0) {
+            return -result;
+        }
+        __builtin_unreachable();
+    }
+    int sys_getentropy(void *buffer, size_t length) UNIMPLEMENTED("sys_getentropy")
+    #endif
+    // FILESYSTEM
+    int sys_write(int fd, const void *buffer, size_t count, ssize_t *written) {
+        auto result = syscall(SYS_WRITE, fd, buffer, count);
+        if (result < 0) {
+            return -result;
+        }
+        *written = result;
+        return 0;
+    }
+    int sys_read(int fd, void *buf, size_t count, ssize_t *bytes_read) {
+        auto result = syscall(SYS_READ, fd, buf, count);
+        if (result < 0) {
+            *bytes_read = 0;
+            return -result;
+        }
+        *bytes_read = result;
+        return 0;
+    }
+    int sys_pwrite(int fd, const void *buffer, size_t count, off_t off, ssize_t *written) UNIMPLEMENTED("sys_pwrite")
+    int sys_pread(int fd, void *buf, size_t count, off_t off, ssize_t *bytes_read) UNIMPLEMENTED("sys_pread")
+    int sys_seek(int fd, off_t offset, int whence, off_t *new_offset) {
+        auto result = syscall(SYS_LSEEK, fd, offset, whence);
+        if (result < 0) {
+            return -result;
+	    }
+        *new_offset = result;
+        return 0;
+    }
+    int sys_open(const char *filename, int flags, mode_t mode, int *fd) {
+        auto result = syscall(SYS_OPEN, filename, flags);
+        if (result < 0) {
+            return -result;
+        }
+        *fd = result;
+        return 0;
+    }
+    int sys_close(int fd) {
+        auto result = syscall(SYS_CLOSE, fd);
+        if (result < 0) {
+            return -result;
+        }
+        return 0;
+    }
+    int sys_access(const char *filename, int mode) {
+        auto result = syscall(SYS_ACCESS, filename, mode);
+        if (result < 0) {
+            return -result;
+        }
+        return 0;
+    }
+    int sys_stat(fsfd_target fsfdt, int fd, const char *path, int flags, struct stat *statbuf) {
+        if (fsfdt == fsfd_target::path) {
+            auto result = syscall(SYS_STAT,path,statbuf);
+            if (result < 0) {
+                return -result;
+            }
+            return 0;
+        } else if (fsfdt == fsfd_target::fd) {
+            auto result = syscall(SYS_FSTAT,fd,statbuf);
+            if (result < 0) {
+                return -result;
+            }
+            return 0;
+        } else if (fsfdt == fsfd_target::fd_path) {
+            mlibc::infoLogger() << "attempt to call stat with unsupported fsfd target" << frg::endlog;
+            memset(statbuf, 0, sizeof(struct stat));
+        }
+        return 0;
+    }
+    int sys_ioctl(int fd, unsigned long request, void *arg, int *result) {
+        auto sys_res = syscall(SYS_IOCTL, fd, request, arg);
+        if (sys_res < 0) {
+            return -sys_res;
+        }
+        *result = sys_res;
+        return 0;
+    }
+    int sys_isatty(int fd) {
+        return ENOTTY;
+    }
+    int sys_tcgetattr(int fd, struct termios *attr) {
+        mlibc::infoLogger() << "mlibc: tcgetattr is not supported" << frg::endlog;
+        return 0;
+    }
+    int sys_tcsetattr(int fd, int optional_action, const struct termios *attr) {
+        mlibc::infoLogger() << "mlibc: tcsetattr is not supported" << frg::endlog;
+        return 0;
+    }
+    int sys_poll(struct pollfd *fds, nfds_t count, int timeout, int *num_events) {
+        mlibc::infoLogger() << "mlibc: poll is not supported" << frg::endlog;
+        return 0;
+    }
+    int sys_mkdir(const char *path) {
+        auto result = syscall(SYS_OPEN, path, O_DIRECTORY | O_CREAT | O_RDONLY);
+        if (result < 0) {
+            return -result;
+        }
+        syscall(SYS_CLOSE,result);
+        return 0;
+    }
+    int sys_rmdir(const char *path) {
+        sys_unlinkat(0,path,AT_FDCWD);
+    }
+    int sys_link(const char *srcpath, const char *destpath) UNIMPLEMENTED("sys_link")
+    int sys_unlinkat(int fd, const char *path, int flags) {
+        if(fd != AT_FDCWD && *path != '/') {
+            mlibc::infoLogger() << "sys_unlinkat is not supported" << frg::endlog;
+            return 0;
+        }
+        auto result = syscall(SYS_UNLINK, path);
+        if (result < 0) {
+            return -result;
+	    }
+        return 0;
+    }
+    int sys_read_entries(int handle, void *buffer, size_t max_size, size_t *bytes_read) {
+        auto result = syscall(SYS_READ,handle,buffer,max_size);
+        if(result < 0) {
+            return -result;
+        }
+        *bytes_read = result;
+        return 0;
+    }
+    int sys_open_dir(const char *path, int *handle) {
+        return sys_open(path, O_DIRECTORY, 0, handle);
+    }
+    int sys_rename(const char *path, const char *new_path) UNIMPLEMENTED("sys_rename")
+    int sys_readlink(const char *path, void *buffer, size_t max_size, ssize_t *length) UNIMPLEMENTED("sys_readlink")
+    int sys_dup(int fd, int flags, int *newfd) {
+        auto result = syscall(SYS_DUP, fd, ~0);
+        if (result < 0) {
+            return -result;
+        }
+        *newfd = result;
+        return 0;
+    }
+    int sys_dup2(int fd, int flags, int newfd) {
+        auto result = syscall(SYS_DUP, fd, newfd);
+        if (result < 0) {
+            return -result;
+        }
+        return 0;
+    }
+    int sys_fcntl(int fd, int request, va_list args, int *result_value) {
+        mlibc::infoLogger() << "mlibc: sys_fcntl is not supported" << frg::endlog;
+        *result_value = 0;
+        return 0;
+    }
+    int sys_pselect(int nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, const struct timespec *timeout, const sigset_t *sigmask, int *num_events) {
+        mlibc::infoLogger() << "mlibc: sys_pselect is not supported" << frg::endlog;
+        *num_events = 10;
+        return 0;
+    }
+    int sys_chmod(const char *pathname, mode_t mode) {
+        auto result = syscall(SYS_CHMOD, pathname, mode);
+        if (result < 0) {
+            return -result;
+        }
+        return 0;
+    }
+    int sys_uname(struct utsname* buf)
+        ensure(buf);
+        strcpy(buf->sysname, MLIBC_SYSTEM_NAME);
+        strcpy(buf->nodename, "owlOS");
+        strcpy(buf->release, "Nightly");
+        strcpy(buf->version, _TIMESTAMP_);
+        strcpy(buf->machine, "x86_64-pc");
+        return 0;
+    }
+    int sys_pipe(int *fds, int flags) {
+        auto result = syscall(SYS_PIPE, fds);
+        if (result < 0) {
+            return -result;
+        }
+        return 0;
+    }
+}
diff --git a/sysdeps/owlos/generic/thread.cpp b/sysdeps/owlos/generic/thread.cpp
new file mode 100644
index 00000000..b0af65c5
--- /dev/null
+++ b/sysdeps/owlos/generic/thread.cpp
@@ -0,0 +1,39 @@
+#include <mlibc/thread-entry.hpp>
+#include <mlibc/all-sysdeps.hpp>
+#include <mlibc/tcb.hpp>
+#include <bits/ensure.h>
+#include <stdint.h>
+#include <stddef.h>
+#include <sys/mman.h>
+
+namespace mlibc {
+
+extern "C" void __mlibc_enter_thread(void *entry, void *user_arg, Tcb *tcb) {
+    while (!__atomic_load_n(&tcb->tid, __ATOMIC_RELAXED))
+        mlibc::sys_futex_wait(&tcb->tid, 0, nullptr);
+
+    if (mlibc::sys_tcb_set(tcb))
+        __ensure(!"sys_tcb_set() failed");
+
+    void *(*func)(void *) = reinterpret_cast<void *(*)(void *)>(entry);
+    auto result = func(user_arg);
+
+    auto self = reinterpret_cast<Tcb *>(tcb);
+
+    self->returnValue = result;
+    __atomic_store_n(&self->didExit, 1, __ATOMIC_RELEASE);
+    mlibc::sys_futex_wake(&self->didExit);
+
+    mlibc::sys_thread_exit();
+}
+
+void *prepare_stack(void *entry, void *user_arg, void *tcb) {
+    auto sp_bottom = reinterpret_cast<uintptr_t>(mmap(nullptr, 0x1000000, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, -1, 0));
+    uintptr_t *sp = reinterpret_cast<uintptr_t *>(sp_bottom + 0x1000000);
+    *--sp = reinterpret_cast<uintptr_t>(tcb);
+    *--sp = reinterpret_cast<uintptr_t>(user_arg);
+    *--sp = reinterpret_cast<uintptr_t>(entry);
+    return sp;
+}
+
+}
\ No newline at end of file
diff --git a/sysdeps/owlos/include/abi-bits/abi.h b/sysdeps/owlos/include/abi-bits/abi.h
new file mode 120000
index 00000000..c9458601
--- /dev/null
+++ b/sysdeps/owlos/include/abi-bits/abi.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/abi.h
\ No newline at end of file
diff --git a/sysdeps/owlos/include/abi-bits/access.h b/sysdeps/owlos/include/abi-bits/access.h
new file mode 120000
index 00000000..171f75f8
--- /dev/null
+++ b/sysdeps/owlos/include/abi-bits/access.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/access.h
\ No newline at end of file
diff --git a/sysdeps/owlos/include/abi-bits/auxv.h b/sysdeps/owlos/include/abi-bits/auxv.h
new file mode 120000
index 00000000..b7bb1093
--- /dev/null
+++ b/sysdeps/owlos/include/abi-bits/auxv.h
@@ -0,0 +1 @@
+../../../../abis/qword/auxv.h
\ No newline at end of file
diff --git a/sysdeps/owlos/include/abi-bits/blkcnt_t.h b/sysdeps/owlos/include/abi-bits/blkcnt_t.h
new file mode 120000
index 00000000..e9d9f1b4
--- /dev/null
+++ b/sysdeps/owlos/include/abi-bits/blkcnt_t.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/blkcnt_t.h
\ No newline at end of file
diff --git a/sysdeps/owlos/include/abi-bits/blksize_t.h b/sysdeps/owlos/include/abi-bits/blksize_t.h
new file mode 120000
index 00000000..c6dfb6e0
--- /dev/null
+++ b/sysdeps/owlos/include/abi-bits/blksize_t.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/blksize_t.h
\ No newline at end of file
diff --git a/sysdeps/owlos/include/abi-bits/dev_t.h b/sysdeps/owlos/include/abi-bits/dev_t.h
new file mode 120000
index 00000000..0c1143b9
--- /dev/null
+++ b/sysdeps/owlos/include/abi-bits/dev_t.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/dev_t.h
\ No newline at end of file
diff --git a/sysdeps/owlos/include/abi-bits/errno.h b/sysdeps/owlos/include/abi-bits/errno.h
new file mode 120000
index 00000000..589859fb
--- /dev/null
+++ b/sysdeps/owlos/include/abi-bits/errno.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/errno.h
\ No newline at end of file
diff --git a/sysdeps/owlos/include/abi-bits/fcntl.h b/sysdeps/owlos/include/abi-bits/fcntl.h
new file mode 120000
index 00000000..ea5323ad
--- /dev/null
+++ b/sysdeps/owlos/include/abi-bits/fcntl.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/fcntl.h
\ No newline at end of file
diff --git a/sysdeps/owlos/include/abi-bits/gid_t.h b/sysdeps/owlos/include/abi-bits/gid_t.h
new file mode 120000
index 00000000..6a772180
--- /dev/null
+++ b/sysdeps/owlos/include/abi-bits/gid_t.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/gid_t.h
\ No newline at end of file
diff --git a/sysdeps/owlos/include/abi-bits/in.h b/sysdeps/owlos/include/abi-bits/in.h
new file mode 120000
index 00000000..b58c683f
--- /dev/null
+++ b/sysdeps/owlos/include/abi-bits/in.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/in.h
\ No newline at end of file
diff --git a/sysdeps/owlos/include/abi-bits/ino_t.h b/sysdeps/owlos/include/abi-bits/ino_t.h
new file mode 120000
index 00000000..10d644e7
--- /dev/null
+++ b/sysdeps/owlos/include/abi-bits/ino_t.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/ino_t.h
\ No newline at end of file
diff --git a/sysdeps/owlos/include/abi-bits/limits.h b/sysdeps/owlos/include/abi-bits/limits.h
new file mode 120000
index 00000000..1aa58942
--- /dev/null
+++ b/sysdeps/owlos/include/abi-bits/limits.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/limits.h
\ No newline at end of file
diff --git a/sysdeps/owlos/include/abi-bits/mode_t.h b/sysdeps/owlos/include/abi-bits/mode_t.h
new file mode 120000
index 00000000..29d77331
--- /dev/null
+++ b/sysdeps/owlos/include/abi-bits/mode_t.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/mode_t.h
\ No newline at end of file
diff --git a/sysdeps/owlos/include/abi-bits/nlink_t.h b/sysdeps/owlos/include/abi-bits/nlink_t.h
new file mode 120000
index 00000000..7618c27f
--- /dev/null
+++ b/sysdeps/owlos/include/abi-bits/nlink_t.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/nlink_t.h
\ No newline at end of file
diff --git a/sysdeps/owlos/include/abi-bits/pid_t.h b/sysdeps/owlos/include/abi-bits/pid_t.h
new file mode 120000
index 00000000..3fd26a7f
--- /dev/null
+++ b/sysdeps/owlos/include/abi-bits/pid_t.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/pid_t.h
\ No newline at end of file
diff --git a/sysdeps/owlos/include/abi-bits/reboot.h b/sysdeps/owlos/include/abi-bits/reboot.h
new file mode 120000
index 00000000..ecc3ddb9
--- /dev/null
+++ b/sysdeps/owlos/include/abi-bits/reboot.h
@@ -0,0 +1 @@
+../../../../abis/linux/x86_64/reboot.h
\ No newline at end of file
diff --git a/sysdeps/owlos/include/abi-bits/resource.h b/sysdeps/owlos/include/abi-bits/resource.h
new file mode 120000
index 00000000..3e59c750
--- /dev/null
+++ b/sysdeps/owlos/include/abi-bits/resource.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/resource.h
\ No newline at end of file
diff --git a/sysdeps/owlos/include/abi-bits/seek-whence.h b/sysdeps/owlos/include/abi-bits/seek-whence.h
new file mode 120000
index 00000000..3bd41efd
--- /dev/null
+++ b/sysdeps/owlos/include/abi-bits/seek-whence.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/seek-whence.h
\ No newline at end of file
diff --git a/sysdeps/owlos/include/abi-bits/signal.h b/sysdeps/owlos/include/abi-bits/signal.h
new file mode 120000
index 00000000..b20e5119
--- /dev/null
+++ b/sysdeps/owlos/include/abi-bits/signal.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/signal.h
\ No newline at end of file
diff --git a/sysdeps/owlos/include/abi-bits/socket.h b/sysdeps/owlos/include/abi-bits/socket.h
new file mode 120000
index 00000000..0e1d6be9
--- /dev/null
+++ b/sysdeps/owlos/include/abi-bits/socket.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/socket.h
\ No newline at end of file
diff --git a/sysdeps/owlos/include/abi-bits/stat.h b/sysdeps/owlos/include/abi-bits/stat.h
new file mode 120000
index 00000000..82642c3c
--- /dev/null
+++ b/sysdeps/owlos/include/abi-bits/stat.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/stat.h
\ No newline at end of file
diff --git a/sysdeps/owlos/include/abi-bits/termios.h b/sysdeps/owlos/include/abi-bits/termios.h
new file mode 120000
index 00000000..cfcfe763
--- /dev/null
+++ b/sysdeps/owlos/include/abi-bits/termios.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/termios.h
\ No newline at end of file
diff --git a/sysdeps/owlos/include/abi-bits/time.h b/sysdeps/owlos/include/abi-bits/time.h
new file mode 120000
index 00000000..97f3d52d
--- /dev/null
+++ b/sysdeps/owlos/include/abi-bits/time.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/time.h
\ No newline at end of file
diff --git a/sysdeps/owlos/include/abi-bits/uid_t.h b/sysdeps/owlos/include/abi-bits/uid_t.h
new file mode 120000
index 00000000..1113eba6
--- /dev/null
+++ b/sysdeps/owlos/include/abi-bits/uid_t.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/uid_t.h
\ No newline at end of file
diff --git a/sysdeps/owlos/include/abi-bits/utsname.h b/sysdeps/owlos/include/abi-bits/utsname.h
new file mode 120000
index 00000000..17b993fe
--- /dev/null
+++ b/sysdeps/owlos/include/abi-bits/utsname.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/utsname.h
\ No newline at end of file
diff --git a/sysdeps/owlos/include/abi-bits/vm-flags.h b/sysdeps/owlos/include/abi-bits/vm-flags.h
new file mode 120000
index 00000000..f1a985e6
--- /dev/null
+++ b/sysdeps/owlos/include/abi-bits/vm-flags.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/vm-flags.h
\ No newline at end of file
diff --git a/sysdeps/owlos/include/abi-bits/wait.h b/sysdeps/owlos/include/abi-bits/wait.h
new file mode 120000
index 00000000..6d911c7f
--- /dev/null
+++ b/sysdeps/owlos/include/abi-bits/wait.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/wait.h
\ No newline at end of file
diff --git a/sysdeps/owlos/include/mlibc/thread-entry.hpp b/sysdeps/owlos/include/mlibc/thread-entry.hpp
new file mode 100644
index 00000000..ed5d7d30
--- /dev/null
+++ b/sysdeps/owlos/include/mlibc/thread-entry.hpp
@@ -0,0 +1,10 @@
+#pragma once
+
+#include <mlibc/tcb.hpp>
+
+extern "C" void __mlibc_start_thread(void);
+extern "C" void __mlibc_enter_thread(void *entry, void *user_arg, Tcb *tcb);
+
+namespace mlibc {
+void *prepare_stack(void *entry, void *user_arg, void *tcb);
+} // namespace mlibc
diff --git a/sysdeps/owlos/include/owlos/mmap_args.h b/sysdeps/owlos/include/owlos/mmap_args.h
new file mode 100644
index 00000000..6b65a6c5
--- /dev/null
+++ b/sysdeps/owlos/include/owlos/mmap_args.h
@@ -0,0 +1,15 @@
+#ifndef _OWLOS_MMAP_ARGS_H
+#define _OWLOS_MMAP_ARGS_H
+
+#include <stdint.h>
+
+struct owlOS_MmapArgs {
+    uintptr_t addr;
+    uintptr_t size;
+    uintptr_t prot;
+    uintptr_t flags;
+    uintptr_t fd;
+    intptr_t offset;
+};
+
+#endif
\ No newline at end of file
diff --git a/sysdeps/owlos/include/owlos/syscall.h b/sysdeps/owlos/include/owlos/syscall.h
new file mode 100644
index 00000000..b7810927
--- /dev/null
+++ b/sysdeps/owlos/include/owlos/syscall.h
@@ -0,0 +1,107 @@
+
+#ifndef SYSCALL_H
+#define SYSCALL_H
+
+#include <stdint.h>
+
+#define SYS_YIELD 0
+#define SYS_EXIT 1
+#define SYS_FORK 2
+#define SYS_OPEN 3
+#define SYS_CLOSE 4
+#define SYS_READ 5
+#define SYS_WRITE 6
+#define SYS_LSEEK 7
+#define SYS_DUP 8
+#define SYS_LINK_RESERVED 9
+#define SYS_UNLINK 10
+#define SYS_STAT 11
+#define SYS_FSTAT 12
+#define SYS_ACCESS 13
+#define SYS_CHMOD 14
+#define SYS_CHOWN 15
+#define SYS_UMASK 16
+#define SYS_IOCTL 17
+#define SYS_EXECVE 18
+#define SYS_POLLPID 19
+#define SYS_GETUID 20
+#define SYS_GETEUID 21
+#define SYS_GETGID 22
+#define SYS_GETEGID 23
+#define SYS_SETGROUPS 24
+#define SYS_GETGROUPS 25
+#define SYS_GETPID 26
+#define SYS_GETPPID 27
+#define SYS_SETPGID 28
+#define SYS_GETPGRP 29
+#define SYS_SIGNAL 30
+#define SYS_KILL 31
+#define SYS_SIGRETURN 32
+#define SYS_CLOCK_GET 33
+#define SYS_CHDIR 34
+#define SYS_GETCWD 35
+#define SYS_PIPE 36
+#define SYS_MMAP 37
+#define SYS_MUNMAP 38
+#define SYS_FUTEX_WAIT 39
+#define SYS_FUTEX_WAKE 40
+#define SYS_SET_THREAD_AREA 41
+#define SYS_FOXKERNEL_POWERCTL 0xf0
+#define SYS_FOXKERNEL_LOG 0xf1
+
+#define UNIMPLEMENTED(FUNCTION_NAME)                                           \
+    {                                                                          \
+        sys_libc_log("Unimplemented syscall: " FUNCTION_NAME);                 \
+        sys_exit(1);                                                           \
+        __builtin_unreachable();                                               \
+    }
+
+#ifdef __cplusplus
+extern "C"{
+#endif
+
+__attribute__((always_inline))
+static inline long syscalln0(uint64_t call) {
+    volatile long ret;
+    asm volatile("syscall" : "=a"(ret) : "a"(call)); 
+    return ret;
+}
+
+__attribute__((always_inline))
+static long syscalln1(uint64_t call, uint64_t arg0) {
+    volatile long ret;
+    asm volatile("syscall" : "=a"(ret) : "a"(call), "D"(arg0) : "memory"); 
+    return ret;
+}
+
+__attribute__((always_inline))
+static long syscalln2(uint64_t call, uint64_t arg0, uint64_t arg1) {
+    volatile long ret;
+    asm volatile("syscall" : "=a"(ret) : "a"(call), "D"(arg0), "S"(arg1) : "memory"); 
+    return ret;
+}
+
+__attribute__((always_inline))
+static long syscalln3(uint64_t call, uint64_t arg0, uint64_t arg1, uint64_t arg2) {
+    volatile long ret;
+    asm volatile("syscall" : "=a"(ret) : "a"(call), "D"(arg0), "S"(arg1), "d"(arg2) : "memory"); 
+    return ret;
+}
+
+#ifdef __cplusplus
+}
+__attribute__((always_inline)) static inline long _syscall(uint64_t call) { return syscalln0(call); }
+__attribute__((always_inline)) static inline long _syscall(uint64_t call, uint64_t arg0) { return syscalln1(call, arg0); }
+__attribute__((always_inline)) static inline long _syscall(uint64_t call, uint64_t arg0, uint64_t arg1) { return syscalln2(call, arg0, arg1); }
+__attribute__((always_inline)) static inline long _syscall(uint64_t call, uint64_t arg0, uint64_t arg1, uint64_t arg2) { return syscalln3(call, arg0, arg1, arg2); }
+
+template<typename... T>
+__attribute__((always_inline)) static inline long syscall(uint64_t call, T... args){
+    return _syscall(call, (uint64_t)(args)...);
+}
+#else
+    #define GET_SYSCALL(a0, a1, a2, a3, a4, a5, a6, name, ...) name
+    #define syscall(...) GET_SYSCALL(__VA_ARGS__, syscalln6, syscalln5, syscalln4, syscalln3, syscalln2, syscalln1, syscalln0)(__VA_ARGS__) 
+#endif
+
+#endif
diff --git a/sysdeps/owlos/meson.build b/sysdeps/owlos/meson.build
new file mode 100644
index 00000000..8edfc38a
--- /dev/null
+++ b/sysdeps/owlos/meson.build
@@ -0,0 +1,66 @@
+
+rtdl_sources += files(
+	'generic/generic.cpp'
+)
+
+libc_sources += files(
+	'generic/entry.cpp',
+	'generic/generic.cpp',
+	'generic/thread.cpp',
+)
+
+if not no_headers
+	install_headers(
+		'include/abi-bits/abi.h',
+		'include/abi-bits/auxv.h',
+		'include/abi-bits/seek-whence.h',
+		'include/abi-bits/vm-flags.h',
+		'include/abi-bits/errno.h',
+		'include/abi-bits/fcntl.h',
+		'include/abi-bits/in.h',
+		'include/abi-bits/resource.h',
+		'include/abi-bits/signal.h',
+		'include/abi-bits/stat.h',
+		'include/abi-bits/socket.h',
+		'include/abi-bits/termios.h',
+		'include/abi-bits/time.h',
+		'include/abi-bits/blkcnt_t.h',
+		'include/abi-bits/blksize_t.h',
+		'include/abi-bits/dev_t.h',
+		'include/abi-bits/gid_t.h',
+		'include/abi-bits/ino_t.h',
+		'include/abi-bits/mode_t.h',
+		'include/abi-bits/nlink_t.h',
+		'include/abi-bits/pid_t.h',
+		'include/abi-bits/uid_t.h',
+		'include/abi-bits/access.h',
+		'include/abi-bits/wait.h',
+		'include/abi-bits/limits.h',
+		'include/abi-bits/utsname.h',
+		subdir: 'abi-bits'
+	)
+	install_headers(
+		'include/owlos/syscall.h',
+		'include/owlos/mmap_args.h',
+		subdir: 'owlos'
+	)
+endif
+
+if not headers_only
+	if host_machine.cpu_family() == 'x86_64'
+		crt = custom_target('crt0',
+			build_by_default: true,
+			command: c_compiler.cmd_array() + ['-c', '-o', '@OUTPUT@', '@INPUT@'],
+			input: 'AMD64/crt0.S',
+			output: 'crt0.o',
+			install: true,
+			install_dir: get_option('libdir')
+		)
+		libc_sources += files(
+			'AMD64/thread_entry.S',
+		)
+	else
+		error('Unknown architecture')
+	endif
+endif
+
-- 
2.34.1

